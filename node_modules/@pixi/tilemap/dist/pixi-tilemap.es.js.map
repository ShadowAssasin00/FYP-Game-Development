{"version":3,"file":"pixi-tilemap.es.js","sources":["../src/CanvasTileRenderer.ts","../src/settings.ts","../src/Tilemap.ts","../src/CompositeTilemap.ts","../src/TextileResource.ts","../src/shaderGenerator.ts","../src/TilemapShader.ts","../src/TileRenderer.ts","../src/index.ts"],"sourcesContent":["import { extensions, ExtensionType, IRenderer } from '@pixi/core';\n\n/**\n * The renderer plugin for canvas. It isn't registered by default.\n *\n * ```\n * import { CanvasTileRenderer } from '@pixi/tilemap';\n * import { CanvasRenderer } from '@pixi/canvas-core';\n *\n * // You must register this yourself (optional). @pixi/tilemap doesn't do it to\n * // prevent a hard dependency on @pixi/canvas-core.\n * CanvasTileRenderer.registerExtension();\n * ```\n */\n// TODO: Move to @pixi/tilemap-canvas\nexport class CanvasTileRenderer\n{\n    /** The renderer */\n    renderer: IRenderer;\n\n    /** The global tile animation state */\n    tileAnim = [0, 0];\n\n    /** @deprecated */\n    dontUseTransform = false;\n\n    /** @param renderer */\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n        this.tileAnim = [0, 0];\n    }\n\n    static registerExtension()\n    {\n        extensions.add({\n            name: 'tilemap',\n            type: ExtensionType.CanvasRendererPlugin,\n            ref: CanvasTileRenderer as any\n        });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    static getInstance(renderer: any): CanvasTileRenderer\n    {\n        if (!renderer.plugins.tilemap)\n        {\n            throw new Error('Extension not registered!');\n        }\n\n        return renderer.plugins.tilemap;\n    }\n}\n","import { SCALE_MODES } from '@pixi/core';\n\n/**\n * These are additional @pixi/tilemap options.\n *\n * This settings should not be changed after the renderer has initialized; otherwise, the behavior\n * is undefined.\n */\nexport const settings = {\n    /** The default number of textures per tilemap in a tilemap composite. */\n    TEXTURES_PER_TILEMAP: 16,\n\n    /**\n     * The width/height of each texture tile in a {@link TEXTILE_DIMEN}. This is 1024px by default.\n     *\n     * This should fit all tile base-textures; otherwise, {@link TextileResource} may fail to correctly\n     * upload the textures together in a tiled fashion.\n     */\n    TEXTILE_DIMEN: 1024,\n\n    /**\n     * The number of texture tiles per {@link TextileResource}.\n     *\n     * Texture tiling is disabled by default, and so this is set to `1` by default. If it is set to a\n     * higher value, textures will be uploaded together in a tiled fashion.\n     *\n     * Since {@link TextileResource} is a dual-column format, this should be even for packing\n     * efficiency. The optimal value is usually 4.\n     */\n    TEXTILE_UNITS: 1,\n\n    /** The scaling mode of the combined texture tiling. */\n    TEXTILE_SCALE_MODE: SCALE_MODES.LINEAR,\n\n    /** This will enable 32-bit index buffers. It's useful when you have more than 16K tiles. */\n    use32bitIndex: false,\n\n    /** Flags whether textiles should be cleared when each tile is uploaded. */\n    DO_CLEAR: true,\n\n    // Backward compatibility\n    get maxTextures(): number { return this.MAX_TEXTURES; },\n    set maxTextures(value: number) { this.MAX_TEXTURES = value; },\n\n    get boundSize(): number { return this.TEXTURE_TILE_DIMEN; },\n    set boundSize(value: number) { this.TILE_TEXTURE_DIMEN = value; },\n\n    get boundCountPerBuffer(): number { return this.TEXTILE_UNITS; },\n    set boundCountPerBuffer(value: number) { this.TEXTILE_UNITS = value; },\n};\n\n// @deprecated\nexport const Constant = settings;\n","/* eslint-disable no-unused-vars */\nimport { Container, Bounds } from '@pixi/display';\nimport { Texture, Renderer, Matrix, Rectangle, groupD8, DRAW_MODES } from '@pixi/core';\nimport { TileRenderer } from './TileRenderer';\nimport { settings } from './settings';\nimport { CanvasTileRenderer } from './CanvasTileRenderer';\n\nimport type { BaseTexture } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { TilemapGeometry } from './TilemapShader';\n\nenum POINT_STRUCT\n    {\n    U,\n    V,\n    X,\n    Y,\n    TILE_WIDTH,\n    TILE_HEIGHT,\n    ROTATE,\n    ANIM_X,\n    ANIM_Y,\n    TEXTURE_INDEX,\n    ANIM_COUNT_X,\n    ANIM_COUNT_Y,\n    ANIM_DIVISOR,\n    ALPHA,\n}\n\nexport const POINT_STRUCT_SIZE = (Object.keys(POINT_STRUCT).length / 2);\n\n/**\n * A rectangular tilemap implementation that renders a predefined set of tile textures.\n *\n * The {@link Tilemap.tileset tileset} of a tilemap defines the list of base-textures that can be painted in the\n * tilemap. A texture is identified using its base-texture's index into the this list, i.e. changing the base-texture\n * at a given index in the tileset modifies the paint of all tiles pointing to that index.\n *\n * The size of the tileset is limited by the texture units supported by the client device. The minimum supported\n * value is 8, as defined by the WebGL 1 specification. `gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS`) can be used\n * to extract this limit. {@link CompositeTilemap} can be used to get around this limit by layering multiple tilemap\n * instances.\n *\n * @example\n * import { Tilemap } from '@pixi/tilemap';\n * import { Loader } from '@pixi/loaders';\n *\n * // Add the spritesheet into your loader!\n * Loader.shared.add('atlas', 'assets/atlas.json');\n *\n * // Make the tilemap once the tileset assets are available.\n * Loader.shared.load(function onTilesetLoaded()\n * {\n *      // The base-texture is shared between all the tile textures.\n *      const tilemap = new Tilemap([Texture.from('grass.png').baseTexture])\n *          .tile('grass.png', 0, 0)\n *          .tile('grass.png', 100, 100)\n *          .tile('brick_wall.png', 0, 100);\n * });\n */\nexport class Tilemap extends Container\n{\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    _globalMat: Matrix = null;\n\n    /**\n     * The tile animation frame.\n     *\n     * @see CompositeTilemap.tileAnim\n     */\n    public tileAnim: [number, number] = null;\n\n    /**\n     * This is the last uploaded size of the tilemap geometry.\n     * @ignore\n     */\n    modificationMarker = 0;\n\n    /** @ignore */\n    offsetX = 0;\n\n    /** @ignore */\n    offsetY = 0;\n\n    /** @ignore */\n    compositeParent = false;\n\n    /**\n     * The list of base-textures being used in the tilemap.\n     *\n     * This should not be shuffled after tiles have been added into this tilemap. Usually, only tile textures\n     * should be added after tiles have been added into the map.\n     */\n    protected tileset: Array<BaseTexture>;\n\n    /**\n     * The local bounds of the tilemap itself. This does not include DisplayObject children.\n     */\n    protected readonly tilemapBounds = new Bounds();\n\n    /** Flags whether any animated tile was added. */\n    protected hasAnimatedTile = false;\n\n    /** The interleaved geometry of the tilemap. */\n    private pointsBuf: Array<number> = [];\n\n    /**\n     * @param tileset - The tileset to use for the tilemap. This can be reset later with {@link Tilemap.setTileset}. The\n     *      base-textures in this array must not be duplicated.\n     */\n    constructor(tileset: BaseTexture | Array<BaseTexture>)\n    {\n        super();\n        this.setTileset(tileset);\n    }\n\n    /**\n     * @returns The tileset of this tilemap.\n     */\n    getTileset(): Array<BaseTexture>\n    {\n        return this.tileset;\n    }\n\n    /**\n     * Define the tileset used by the tilemap.\n     *\n     * @param tileset - The list of textures to use in the tilemap. If a base-texture (not array) is passed, it will\n     *  be wrapped into an array. This should not contain any duplicates.\n     */\n    setTileset(tileset: BaseTexture | Array<BaseTexture> = []): this\n    {\n        if (!Array.isArray(tileset))\n        {\n            tileset = [tileset];\n        }\n        for (let i = 0; i < tileset.length; i++)\n        {\n            if ((tileset[i] as unknown as Texture).baseTexture)\n            {\n                tileset[i] = (tileset[i] as unknown as Texture).baseTexture;\n            }\n        }\n\n        this.tileset = tileset;\n\n        return this;\n    }\n\n    /**  Clears all the tiles added into this tilemap. */\n    clear(): this\n    {\n        this.pointsBuf.length = 0;\n        this.modificationMarker = 0;\n        this.tilemapBounds.clear();\n        this.hasAnimatedTile = false;\n\n        return this;\n    }\n\n    /**\n     * Adds a tile that paints the given texture at (x, y).\n     *\n     * @param tileTexture - The tiling texture to render.\n     * @param x - The local x-coordinate of the tile's position.\n     * @param y - The local y-coordinate of the tile's position.\n     * @param options - Additional tile options.\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\n     *      animation frame textures in the base-texture.\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\n     *      animation frames textures in the base-texture.\n     * @param [options.rotate=0]\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\n     *      per row.\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\n     *      per column.\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration of each frame\n     * @param [options.alpha=1] - Tile alpha\n     * @return This tilemap, good for chaining.\n     */\n    tile(\n        tileTexture: number | string | Texture | BaseTexture,\n        x: number,\n        y: number,\n        options: {\n            u?: number,\n            v?: number,\n            tileWidth?: number,\n            tileHeight?: number,\n            animX?: number,\n            animY?: number,\n            rotate?: number,\n            animCountX?: number,\n            animCountY?: number,\n            animDivisor?: number,\n            alpha?: number,\n        } = {}\n    ): this\n    {\n        let baseTexture: BaseTexture;\n        let textureIndex = -1;\n\n        if (typeof tileTexture === 'number')\n        {\n            textureIndex = tileTexture;\n            baseTexture = this.tileset[textureIndex];\n        }\n        else\n        {\n            let texture: Texture | BaseTexture;\n\n            if (typeof tileTexture === 'string')\n            {\n                texture = Texture.from(tileTexture);\n            }\n            else\n            {\n                texture = tileTexture;\n            }\n\n            const textureList = this.tileset;\n\n            for (let i = 0; i < textureList.length; i++)\n            {\n                if (textureList[i] === texture.castToBaseTexture())\n                {\n                    textureIndex = i;\n                    break;\n                }\n            }\n\n            if ('baseTexture' in texture)\n            {\n                options.u = options.u ?? texture.frame.x;\n                options.v = options.v ?? texture.frame.y;\n                options.tileWidth = options.tileWidth ?? texture.orig.width;\n                options.tileHeight = options.tileHeight ?? texture.orig.height;\n            }\n\n            baseTexture = texture.castToBaseTexture();\n        }\n\n        if (!baseTexture || textureIndex < 0)\n        {\n            console.error('The tile texture was not found in the tilemap tileset.');\n\n            return this;\n        }\n\n        const {\n            u = 0,\n            v = 0,\n            tileWidth = baseTexture.realWidth,\n            tileHeight = baseTexture.realHeight,\n            animX = 0,\n            animY = 0,\n            rotate = 0,\n            animCountX = 1024,\n            animCountY = 1024,\n            animDivisor = 1,\n            alpha = 1,\n        } = options;\n\n        const pb = this.pointsBuf;\n\n        this.hasAnimatedTile = this.hasAnimatedTile || animX > 0 || animY > 0;\n\n        pb.push(u);\n        pb.push(v);\n        pb.push(x);\n        pb.push(y);\n        pb.push(tileWidth);\n        pb.push(tileHeight);\n        pb.push(rotate);\n        pb.push(animX | 0);\n        pb.push(animY | 0);\n        pb.push(textureIndex);\n        pb.push(animCountX);\n        pb.push(animCountY);\n        pb.push(animDivisor);\n        pb.push(alpha);\n\n        this.tilemapBounds.addFramePad(x, y, x + tileWidth, y + tileHeight, 0, 0);\n\n        return this;\n    }\n\n    /** Changes the rotation of the last tile. */\n    tileRotate(rotate: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.TEXTURE_INDEX)] = rotate;\n    }\n\n    /** Changes the `animX`, `animCountX` of the last tile. */\n    tileAnimX(offset: number, count: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_X)] = offset;\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_X)] = count;\n        // pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = duration;\n    }\n\n    /** Changes the `animY`, `animCountY` of the last tile. */\n    tileAnimY(offset: number, count: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_Y)] = offset;\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_Y)] = count;\n    }\n\n    /** Changes the `animDivisor` value of the last tile. */\n    tileAnimDivisor(divisor: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = divisor;\n    }\n\n    tileAlpha(alpha: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ALPHA)] = alpha;\n    }\n\n    renderCanvas = (renderer: any): void =>\n    {\n        const plugin = CanvasTileRenderer.getInstance(renderer);\n\n        if (plugin && !plugin.dontUseTransform)\n        {\n            const wt = this.worldTransform;\n\n            renderer.canvasContext.activeContext.setTransform(\n                wt.a,\n                wt.b,\n                wt.c,\n                wt.d,\n                wt.tx * renderer.resolution,\n                wt.ty * renderer.resolution\n            );\n        }\n\n        this.renderCanvasCore(renderer);\n    };\n\n    renderCanvasCore(renderer: any): void\n    {\n        if (this.tileset.length === 0) return;\n        const points = this.pointsBuf;\n        const tileAnim = this.tileAnim || (renderer.plugins.tilemap && renderer.plugins.tilemap.tileAnim);\n\n        renderer.canvasContext.activeContext.fillStyle = '#000000';\n        for (let i = 0, n = points.length; i < n; i += POINT_STRUCT_SIZE)\n        {\n            let x1 = points[i + POINT_STRUCT.U];\n            let y1 = points[i + POINT_STRUCT.V];\n            const x2 = points[i + POINT_STRUCT.X];\n            const y2 = points[i + POINT_STRUCT.Y];\n            const w = points[i + POINT_STRUCT.TILE_WIDTH];\n            const h = points[i + POINT_STRUCT.TILE_HEIGHT];\n\n            x1 += points[i + POINT_STRUCT.ANIM_X] * tileAnim[0];\n            y1 += points[i + POINT_STRUCT.ANIM_Y] * tileAnim[1];\n\n            const textureIndex = points[i + POINT_STRUCT.TEXTURE_INDEX];\n            const alpha = points[i + POINT_STRUCT.ALPHA];\n\n            // canvas does not work with rotate yet\n\n            if (textureIndex >= 0 && this.tileset[textureIndex])\n            {\n                renderer.canvasContext.activeContext.globalAlpha = alpha;\n                renderer.canvasContext.activeContext.drawImage(\n                    (this.tileset[textureIndex] as any).getDrawableSource(),\n                    x1, y1, w, h, x2, y2, w, h\n                );\n            }\n            else\n            {\n                renderer.canvasContext.activeContext.globalAlpha = 0.5;\n                renderer.canvasContext.activeContext.fillRect(x2, y2, w, h);\n            }\n            renderer.canvasContext.activeContext.globalAlpha = 1;\n        }\n    }\n\n    private vbId = 0;\n    private vb: TilemapGeometry = null;\n    private vbBuffer: ArrayBuffer = null;\n    private vbArray: Float32Array = null;\n    private vbInts: Uint32Array = null;\n\n    private destroyVb(): void\n    {\n        if (this.vb)\n        {\n            this.vb.destroy();\n            this.vb = null;\n        }\n    }\n\n    render(renderer: Renderer): void\n    {\n        const plugin = (renderer.plugins as any).tilemap;\n        const shader = plugin.getShader();\n\n        renderer.batch.setObjectRenderer(plugin);\n        this._globalMat = shader.uniforms.projTransMatrix;\n        renderer\n            .globalUniforms\n            .uniforms\n            .projectionMatrix\n            .copyTo(this._globalMat)\n            .append(this.worldTransform);\n\n        shader.uniforms.shadowColor = this.shadowColor;\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\n\n        this.renderWebGLCore(renderer, plugin);\n    }\n\n    renderWebGLCore(renderer: Renderer, plugin: TileRenderer): void\n    {\n        const points = this.pointsBuf;\n\n        if (points.length === 0) return;\n        const rectsCount = points.length / POINT_STRUCT_SIZE;\n\n        const shader = plugin.getShader();\n        const textures = this.tileset;\n\n        if (textures.length === 0) return;\n\n        plugin.bindTileTextures(renderer, textures);\n        renderer.shader.bind(shader, false);\n\n        // lost context! recover!\n        let vb = this.vb;\n\n        if (!vb)\n        {\n            vb = plugin.createVb();\n            this.vb = vb;\n            this.vbId = (vb as any).id;\n            this.vbBuffer = null;\n            this.modificationMarker = 0;\n        }\n\n        plugin.checkIndexBuffer(rectsCount, vb);\n        const boundCountPerBuffer = settings.TEXTILE_UNITS;\n\n        const vertexBuf = vb.getBuffer('aVertexPosition');\n        // if layer was changed, re-upload vertices\n        const vertices = rectsCount * vb.vertPerQuad;\n\n        if (vertices === 0) return;\n        if (this.modificationMarker !== vertices)\n        {\n            this.modificationMarker = vertices;\n            const vs = vb.stride * vertices;\n\n            if (!this.vbBuffer || this.vbBuffer.byteLength < vs)\n            {\n                // !@#$ happens, need resize\n                let bk = vb.stride;\n\n                while (bk < vs)\n                {\n                    bk *= 2;\n                }\n                this.vbBuffer = new ArrayBuffer(bk);\n                this.vbArray = new Float32Array(this.vbBuffer);\n                this.vbInts = new Uint32Array(this.vbBuffer);\n                vertexBuf.update(this.vbBuffer);\n            }\n\n            const arr = this.vbArray;\n            // const ints = this.vbInts;\n            // upload vertices!\n            let sz = 0;\n            // let tint = 0xffffffff;\n            let textureId = 0;\n            let shiftU: number = this.offsetX;\n            let shiftV: number = this.offsetY;\n\n            // let tint = 0xffffffff;\n            // const tint = -1;\n\n            for (let i = 0; i < points.length; i += POINT_STRUCT_SIZE)\n            {\n                const eps = 0.5;\n\n                if (this.compositeParent)\n                {\n                    const textureIndex = points[i + POINT_STRUCT.TEXTURE_INDEX];\n\n                    if (boundCountPerBuffer > 1)\n                    {\n                        // TODO: what if its more than 4?\n                        textureId = (textureIndex >> 2);\n                        shiftU = this.offsetX * (textureIndex & 1);\n                        shiftV = this.offsetY * ((textureIndex >> 1) & 1);\n                    }\n                    else\n                    {\n                        textureId = textureIndex;\n                        shiftU = 0;\n                        shiftV = 0;\n                    }\n                }\n                const x = points[i + POINT_STRUCT.X];\n                const y = points[i + POINT_STRUCT.Y];\n                const w = points[i + POINT_STRUCT.TILE_WIDTH];\n                const h = points[i + POINT_STRUCT.TILE_HEIGHT];\n                const u = points[i + POINT_STRUCT.U] + shiftU;\n                const v = points[i + POINT_STRUCT.V] + shiftV;\n                let rotate = points[i + POINT_STRUCT.ROTATE];\n\n                const animX = points[i + POINT_STRUCT.ANIM_X];\n                const animY = points[i + POINT_STRUCT.ANIM_Y];\n                const animWidth = points[i + POINT_STRUCT.ANIM_COUNT_X] || 1024;\n                const animHeight = points[i + POINT_STRUCT.ANIM_COUNT_Y] || 1024;\n\n                const animXEncoded = animX + (animWidth * 2048);\n                const animYEncoded = animY + (animHeight * 2048);\n                const animDivisor = points[i + POINT_STRUCT.ANIM_DIVISOR];\n                const alpha = points[i + POINT_STRUCT.ALPHA];\n\n                let u0: number;\n                let v0: number; let u1: number;\n                let v1: number; let u2: number;\n                let v2: number; let u3: number;\n                let v3: number;\n\n                if (rotate === 0)\n                {\n                    u0 = u;\n                    v0 = v;\n                    u1 = u + w;\n                    v1 = v;\n                    u2 = u + w;\n                    v2 = v + h;\n                    u3 = u;\n                    v3 = v + h;\n                }\n                else\n                {\n                    let w2 = w / 2;\n                    let h2 = h / 2;\n\n                    if (rotate % 4 !== 0)\n                    {\n                        w2 = h / 2;\n                        h2 = w / 2;\n                    }\n                    const cX = u + w2;\n                    const cY = v + h2;\n\n                    rotate = groupD8.add(rotate, groupD8.NW);\n                    u0 = cX + (w2 * groupD8.uX(rotate));\n                    v0 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n                    u1 = cX + (w2 * groupD8.uX(rotate));\n                    v1 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2);\n                    u2 = cX + (w2 * groupD8.uX(rotate));\n                    v2 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2);\n                    u3 = cX + (w2 * groupD8.uX(rotate));\n                    v3 = cY + (h2 * groupD8.uY(rotate));\n                }\n\n                arr[sz++] = x;\n                arr[sz++] = y;\n                arr[sz++] = u0;\n                arr[sz++] = v0;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n\n                arr[sz++] = x + w;\n                arr[sz++] = y;\n                arr[sz++] = u1;\n                arr[sz++] = v1;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n\n                arr[sz++] = x + w;\n                arr[sz++] = y + h;\n                arr[sz++] = u2;\n                arr[sz++] = v2;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n\n                arr[sz++] = x;\n                arr[sz++] = y + h;\n                arr[sz++] = u3;\n                arr[sz++] = v3;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n            }\n\n            vertexBuf.update(arr);\n        }\n\n        (renderer.geometry as any).bind(vb, shader);\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, rectsCount * 6, 0);\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    isModified(anim: boolean): boolean\n    {\n        if (this.modificationMarker !== this.pointsBuf.length\n            || (anim && this.hasAnimatedTile))\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * This will pull forward the modification marker.\n     *\n     * @internal\n     * @ignore\n     */\n    clearModify(): void\n    {\n        this.modificationMarker = this.pointsBuf.length;\n    }\n\n    /** @override */\n    protected _calculateBounds(): void\n    {\n        const { minX, minY, maxX, maxY } = this.tilemapBounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /** @override */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            return this.tilemapBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** @override */\n    destroy(options?: IDestroyOptions): void\n    {\n        super.destroy(options);\n        this.destroyVb();\n    }\n\n    /**\n     * Deprecated signature for {@link Tilemap.tile tile}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    addFrame(texture: Texture | string | number, x: number, y: number, animX: number, animY: number): boolean\n    {\n        this.tile(\n            texture,\n            x,\n            y,\n            {\n                animX,\n                animY,\n            }\n        );\n\n        return true;\n    }\n\n    /**\n     * Deprecated signature for {@link Tilemap.tile tile}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    // eslint-disable-next-line max-params\n    addRect(\n        textureIndex: number,\n        u: number,\n        v: number,\n        x: number,\n        y: number,\n        tileWidth: number,\n        tileHeight: number,\n        animX = 0,\n        animY = 0,\n        rotate = 0,\n        animCountX = 1024,\n        animCountY = 1024,\n        animDivisor = 1,\n        alpha = 1,\n    ): this\n    {\n        return this.tile(\n            textureIndex,\n            x, y,\n            {\n                u, v, tileWidth, tileHeight, animX, animY, rotate, animCountX, animCountY, animDivisor, alpha\n            }\n        );\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Texture, Renderer, BaseTexture, Matrix } from '@pixi/core';\nimport { Tilemap } from './Tilemap';\nimport { settings } from './settings';\nimport { CanvasTileRenderer } from './CanvasTileRenderer';\n\nimport type { TileRenderer } from './TileRenderer';\n\n/**\n * A tilemap composite that lazily builds tilesets layered into multiple tilemaps.\n *\n * The composite tileset is the concatenation of the individual tilesets used in the tilemaps. You can\n * preinitialized it by passing a list of tile textures to the constructor. Otherwise, the composite tilemap\n * is lazily built as you add more tiles with newer tile textures. A new tilemap is created once the last\n * tilemap has reached its limit (as set by {@link CompositeTilemap.texturesPerTilemap texturesPerTilemap}).\n *\n * @example\n * import { Application } from '@pixi/app';\n * import { CompositeTilemap } from '@pixi/tilemap';\n * import { Loader } from '@pixi/loaders';\n *\n * // Setup view & stage.\n * const app = new Application();\n *\n * document.body.appendChild(app.renderer.view);\n * app.stage.interactive = true;\n *\n * // Global reference to the tilemap.\n * let globalTilemap: CompositeTilemap;\n *\n * // Load the tileset spritesheet!\n * Loader.shared.load('atlas.json');\n *\n * // Initialize the tilemap scene when the assets load.\n * Loader.shared.load(function onTilesetLoaded()\n * {\n *      const tilemap = new CompositeTilemap();\n *\n *      // Setup the game level with grass and dungeons!\n *      for (let x = 0; x < 10; x++)\n *      {\n *          for (let y = 0; y < 10; y++)\n *          {\n *              tilemap.tile(\n *                  x % 2 === 0 && (x === y || x + y === 10) ? 'dungeon.png' : 'grass.png',\n *                  x * 100,\n *                  y * 100,\n *              );\n *          }\n *      }\n *\n *      globalTilemap = app.stage.addChild(tilemap);\n * });\n *\n * // Show a bomb at a random location whenever the user clicks!\n * app.stage.on('click', function onClick()\n * {\n *      if (!globalTilemap) return;\n *\n *      const x = Math.floor(Math.random() * 10);\n *      const y = Math.floor(Math.random() * 10);\n *\n *      globalTilemap.tile('bomb.png', x * 100, y * 100);\n * });\n */\nexport class CompositeTilemap extends Container\n{\n    /** The hard limit on the number of tile textures used in each tilemap. */\n    public readonly texturesPerTilemap: number;\n\n    /**\n     * The animation frame vector.\n     *\n     * Animated tiles have four parameters - `animX`, `animY`, `animCountX`, `animCountY`. The textures\n     * of adjacent animation frames are at offset `animX` or `animY` of each other, with `animCountX` per\n     * row and `animCountY` per column.\n     *\n     * The animation frame vector specifies which animation frame texture to use. If the x/y coordinate is\n     * larger than the `animCountX` or `animCountY` for a specific tile, the modulus is taken.\n     */\n    public tileAnim: [number, number] = null;\n\n    /** The last modified tilemap. */\n    protected lastModifiedTilemap: Tilemap = null;\n\n    private modificationMarker = 0;\n    private shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    private _globalMat: Matrix = null;\n\n    /**\n     * @param tileset - A list of tile base-textures that will be used to eagerly initialized the layered\n     *  tilemaps. This is only an performance optimization, and using {@link CompositeTilemap.tile tile}\n     *  will work equivalently.\n     */\n    constructor(tileset?: Array<BaseTexture>)\n    {\n        super();\n\n        this.tileset(tileset);\n        this.texturesPerTilemap = settings.TEXTURES_PER_TILEMAP;\n    }\n\n    /**\n     * This will preinitialize the tilesets of the layered tilemaps.\n     *\n     * If used after a tilemap has been created (or a tile added), this will overwrite the tile textures of the\n     * existing tilemaps. Passing the tileset to the constructor instead is the best practice.\n     *\n     * @param tileTextures - The list of tile textures that make up the tileset.\n     */\n    tileset(tileTextures: Array<BaseTexture>): this\n    {\n        if (!tileTextures)\n        {\n            tileTextures = [];\n        }\n\n        const texPerChild = this.texturesPerTilemap;\n        const len1 = this.children.length;\n        const len2 = Math.ceil(tileTextures.length / texPerChild);\n\n        for (let i = 0; i < Math.min(len1, len2); i++)\n        {\n            (this.children[i] as Tilemap).setTileset(\n                tileTextures.slice(i * texPerChild, (i + 1) * texPerChild)\n            );\n        }\n        for (let i = len1; i < len2; i++)\n        {\n            const tilemap = new Tilemap(tileTextures.slice(i * texPerChild, (i + 1) * texPerChild));\n\n            tilemap.compositeParent = true;\n            tilemap.offsetX = settings.TEXTILE_DIMEN;\n            tilemap.offsetY = settings.TEXTILE_DIMEN;\n\n            // TODO: Don't use children\n            this.addChild(tilemap);\n        }\n\n        return this;\n    }\n\n    /** Clears the tilemap composite. */\n    clear(): this\n    {\n        for (let i = 0; i < this.children.length; i++)\n        {\n            (this.children[i] as Tilemap).clear();\n        }\n\n        this.modificationMarker = 0;\n\n        return this;\n    }\n\n    /** Changes the rotation of the last added tile. */\n    tileRotate(rotate: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileRotate(rotate);\n        }\n\n        return this;\n    }\n\n    /** Changes `animX`, `animCountX` of the last added tile. */\n    tileAnimX(offset: number, count: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimX(offset, count);\n        }\n\n        return this;\n    }\n\n    /** Changes `animY`, `animCountY` of the last added tile. */\n    tileAnimY(offset: number, count: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimY(offset, count);\n        }\n\n        return this;\n    }\n\n    /** Changes `tileAnimDivisor` value of the last added tile. */\n    tileAnimDivisor(divisor: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimDivisor(divisor);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a tile that paints the given tile texture at (x, y).\n     *\n     * @param tileTexture - The tile texture. You can pass an index into the composite tilemap as well.\n     * @param x - The local x-coordinate of the tile's location.\n     * @param y - The local y-coordinate of the tile's location.\n     * @param options - Additional options to pass to {@link Tilemap.tile}.\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\n     *      animation frame textures in the base-texture.\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\n     *      animation frames textures in the base-texture.\n     * @param [options.rotate=0]\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\n     *      per row.\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\n     *      per column.\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration each frame\n     * @param [options.alpha=1] - Tile alpha\n     * @return This tilemap, good for chaining.\n     */\n    tile(\n        tileTexture: Texture | string | number,\n        x: number,\n        y: number,\n        options: {\n            u?: number,\n            v?: number,\n            tileWidth?: number,\n            tileHeight?: number,\n            animX?: number,\n            animY?: number,\n            rotate?: number,\n            animCountX?: number,\n            animCountY?: number,\n            animDivisor?: number,\n            alpha?: number,\n        } = {}\n    ): this\n    {\n        let tilemap: Tilemap = null;\n        const children = this.children;\n\n        this.lastModifiedTilemap = null;\n\n        if (typeof tileTexture === 'number')\n        {\n            const childIndex = tileTexture / this.texturesPerTilemap >> 0;\n            let tileIndex = 0;\n\n            tilemap = children[childIndex] as Tilemap;\n\n            if (!tilemap)\n            {\n                tilemap = children[0] as Tilemap;\n\n                // Silently fail if the tilemap doesn't exist\n                if (!tilemap) return this;\n\n                tileIndex = 0;\n            }\n            else\n            {\n                tileIndex = tileTexture % this.texturesPerTilemap;\n            }\n\n            tilemap.tile(\n                tileIndex,\n                x,\n                y,\n                options,\n            );\n        }\n        else\n        {\n            if (typeof tileTexture === 'string')\n            {\n                tileTexture = Texture.from(tileTexture);\n            }\n\n            // Probe all tilemaps to find which tileset contains the base-texture.\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i] as Tilemap;\n                const tex = child.getTileset();\n\n                for (let j = 0; j < tex.length; j++)\n                {\n                    if (tex[j] === tileTexture.baseTexture)\n                    {\n                        tilemap = child;\n                        break;\n                    }\n                }\n\n                if (tilemap)\n                {\n                    break;\n                }\n            }\n\n            // If no tileset contains the base-texture, attempt to add it.\n            if (!tilemap)\n            {\n                // Probe the tilemaps to find one below capacity. If so, add the texture into that tilemap.\n                for (let i = children.length - 1; i >= 0; i--)\n                {\n                    const child = children[i] as Tilemap;\n\n                    if (child.getTileset().length < this.texturesPerTilemap)\n                    {\n                        tilemap = child;\n                        child.getTileset().push(tileTexture.baseTexture);\n                        break;\n                    }\n                }\n\n                // Otherwise, create a new tilemap initialized with that tile texture.\n                if (!tilemap)\n                {\n                    tilemap = new Tilemap(tileTexture.baseTexture);\n                    tilemap.compositeParent = true;\n                    tilemap.offsetX = settings.TEXTILE_DIMEN;\n                    tilemap.offsetY = settings.TEXTILE_DIMEN;\n\n                    this.addChild(tilemap);\n                }\n            }\n\n            tilemap.tile(\n                tileTexture,\n                x,\n                y,\n                options,\n            );\n        }\n\n        this.lastModifiedTilemap = tilemap;\n\n        return this;\n    }\n\n    renderCanvas(renderer: any): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        const tilemapPlugin = CanvasTileRenderer.getInstance(renderer);\n\n        if (tilemapPlugin && !tilemapPlugin.dontUseTransform)\n        {\n            const wt = this.worldTransform;\n\n            renderer.canvasContext.activeContext.setTransform(\n                wt.a,\n                wt.b,\n                wt.c,\n                wt.d,\n                wt.tx * renderer.resolution,\n                wt.ty * renderer.resolution\n            );\n        }\n\n        const layers = this.children;\n\n        for (let i = 0; i < layers.length; i++)\n        {\n            const layer = (layers[i] as Tilemap);\n\n            layer.tileAnim = this.tileAnim;\n            layer.renderCanvasCore(renderer);\n        }\n    }\n\n    render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        const plugin = renderer.plugins.tilemap as TileRenderer;\n        const shader = plugin.getShader();\n\n        renderer.batch.setObjectRenderer(plugin);\n\n        // TODO: dont create new array, please\n        this._globalMat = shader.uniforms.projTransMatrix;\n        renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\n        shader.uniforms.shadowColor = this.shadowColor;\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\n\n        renderer.shader.bind(shader, false);\n\n        const layers = this.children;\n\n        for (let i = 0; i < layers.length; i++)\n        {\n            (layers[i] as Tilemap).renderWebGLCore(renderer, plugin);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    isModified(anim: boolean): boolean\n    {\n        const layers = this.children;\n\n        if (this.modificationMarker !== layers.length)\n        {\n            return true;\n        }\n        for (let i = 0; i < layers.length; i++)\n        {\n            if ((layers[i] as Tilemap).isModified(anim))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    clearModify(): void\n    {\n        const layers = this.children;\n\n        this.modificationMarker = layers.length;\n        for (let i = 0; i < layers.length; i++)\n        {\n            (layers[i] as Tilemap).clearModify();\n        }\n    }\n\n    /**\n     * @deprecated Since @pixi/tilemap 3.\n     * @see CompositeTilemap.tile\n     */\n    addFrame(\n        texture: Texture | string | number,\n        x: number,\n        y: number,\n        animX?: number,\n        animY?: number,\n        animWidth?: number,\n        animHeight?: number,\n        animDivisor?: number,\n        alpha?: number\n    ): this\n    {\n        return this.tile(\n            texture,\n            x, y,\n            {\n                animX,\n                animY,\n                animCountX: animWidth,\n                animCountY: animHeight,\n                animDivisor,\n                alpha\n            }\n        );\n    }\n\n    /**\n     * @deprecated @pixi/tilemap 3\n     * @see CompositeTilemap.tile\n     */\n    // eslint-disable-next-line max-params\n    addRect(\n        textureIndex: number,\n        u: number,\n        v: number,\n        x: number,\n        y: number,\n        tileWidth: number,\n        tileHeight: number,\n        animX?: number,\n        animY?: number,\n        rotate?: number,\n        animWidth?: number,\n        animHeight?: number\n    ): this\n    {\n        const childIndex: number = textureIndex / this.texturesPerTilemap >> 0;\n        const textureId: number = textureIndex % this.texturesPerTilemap;\n\n        if (this.children[childIndex] && (this.children[childIndex] as Tilemap).getTileset())\n        {\n            this.lastModifiedTilemap = (this.children[childIndex] as Tilemap);\n            this.lastModifiedTilemap.addRect(\n                textureId, u, v, x, y, tileWidth, tileHeight, animX, animY, rotate, animWidth, animHeight\n            );\n        }\n        else\n        {\n            this.lastModifiedTilemap = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * Alias for {@link CompositeTilemap.tileset tileset}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    setBitmaps = this.tileset;\n\n    /**\n     * @deprecated Since @pixi/tilemap 3.\n     * @readonly\n     * @see CompositeTilemap.texturesPerTilemap\n     */\n    get texPerChild(): number { return this.texturesPerTilemap; }\n}\n","import { BaseTexture, Renderer, Resource, Texture, GLTexture, ALPHA_MODES } from '@pixi/core';\nimport { settings } from './settings';\n\nexport interface TextileOptions\n{\n    TEXTILE_DIMEN: number;\n    TEXTILE_UNITS: number;\n    DO_CLEAR?: boolean;\n}\n\ntype TextureTile = {\n    dirtyId: number;\n    x: number;\n    y: number;\n    baseTexture: BaseTexture;\n};\n\n// For some reason, ESLint goes mad with indentation in this file ^&^\n/* eslint-disable indent */\n\n/**\n * This texture tiling resource can be used to upload multiple base-textures together.\n *\n * This resource combines multiple base-textures into a \"textile\". They're laid out in\n * a dual column format, placed in row-order order. The size of each tile is predefined,\n * and defaults to {@link settings.TEXTILE_DIMEN}. This means that each input base-texture\n * must is smaller than that along both its width and height.\n *\n * @see settings.TEXTILE_UNITS\n */\nexport class TextileResource extends Resource\n{\n    /** The base-texture that contains all the texture tiles. */\n    public baseTexture: BaseTexture = null;\n\n    private readonly doClear: boolean;\n    private readonly tileDimen: number;\n    private readonly tiles: Array<TextureTile>;\n\n    private _clearBuffer: Uint8Array = null;\n\n    /**\n\t * @param options - This will default to the \"settings\" exported by @pixi/tilemap.\n\t * @param options.TEXTILE_DIMEN - The dimensions of each tile.\n\t * @param options.TEXTILE_UNITS - The number of texture tiles.\n\t */\n    constructor(options: TextileOptions = settings)\n    {\n        super(\n            options.TEXTILE_DIMEN * 2,\n            options.TEXTILE_DIMEN * Math.ceil(options.TEXTILE_UNITS / 2),\n        );\n\n        const tiles: TextureTile[] = this.tiles = new Array(options.TEXTILE_UNITS);\n\n        this.doClear = !!options.DO_CLEAR;\n        this.tileDimen = options.TEXTILE_DIMEN;\n\n        for (let j = 0; j < options.TEXTILE_UNITS; j++)\n        {\n            tiles[j] = {\n                dirtyId: 0,\n                x: options.TEXTILE_DIMEN * (j & 1),\n                y: options.TEXTILE_DIMEN * (j >> 1),\n                baseTexture: Texture.WHITE.baseTexture,\n            };\n        }\n    }\n\n    /**\n\t * Sets the texture to be uploaded for the given tile.\n\t *\n\t * @param index - The index of the tile being set.\n\t * @param texture - The texture with the base-texture to upload.\n\t */\n    tile(index: number, texture: BaseTexture): void\n    {\n        const tile = this.tiles[index];\n\n        if (tile.baseTexture === texture)\n        {\n            return;\n        }\n\n        tile.baseTexture = texture;\n        this.baseTexture.update();\n\n        this.tiles[index].dirtyId = (this.baseTexture as any).dirtyId;\n    }\n\n    /** @override */\n    bind(baseTexture: BaseTexture): void\n    {\n        if (this.baseTexture)\n        {\n            throw new Error('Only one baseTexture is allowed for this resource!');\n        }\n\n        this.baseTexture = baseTexture;\n        super.bind(baseTexture);\n    }\n\n    /** @override */\n    upload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const { gl } = renderer;\n        const { width, height } = this;\n\n        gl.pixelStorei(\n            gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n            texture.alphaMode === undefined || texture.alphaMode === ALPHA_MODES.UNPACK\n        );\n\n        if (glTexture.dirtyId < 0)\n        {\n            (glTexture as any).width = width;\n            (glTexture as any).height = height;\n\n            gl.texImage2D(texture.target, 0,\n                texture.format,\n                width,\n                height,\n                0,\n                texture.format,\n                texture.type,\n                null);\n        }\n\n        const doClear = this.doClear;\n        const tiles = this.tiles;\n\n        if (doClear && !this._clearBuffer)\n        {\n            this._clearBuffer = new Uint8Array(settings.TEXTILE_DIMEN * settings.TEXTILE_DIMEN * 4);\n        }\n\n        for (let i = 0; i < tiles.length; i++)\n        {\n            const spr = tiles[i];\n            const tex = spr.baseTexture;\n\n            if (glTexture.dirtyId >= this.tiles[i].dirtyId)\n            {\n                continue;\n            }\n\n            const res = tex.resource as any;\n\n            if (!tex.valid || !res || !res.source)\n            {\n                continue;\n            }\n            if (doClear && (tex.width < this.tileDimen || tex.height < this.tileDimen))\n            {\n                gl.texSubImage2D(texture.target, 0,\n                    spr.x,\n                    spr.y,\n                    this.tileDimen,\n                    this.tileDimen,\n                    texture.format,\n                    texture.type,\n                    this._clearBuffer);\n            }\n\n            gl.texSubImage2D(texture.target, 0,\n                spr.x,\n                spr.y,\n                texture.format,\n                texture.type,\n                res.source);\n        }\n\n        return true;\n    }\n}\n","import type { TilemapShader } from './TilemapShader';\n\n/**\n * This will generate fragment shader code that samples the correct texture into the \"color\" variable.\n *\n * @internal\n * @ignore\n * @param maxTextures - The texture array length in the shader's uniforms.\n */\nfunction generateSampleSrc(maxTextures: number): string\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    src += 'if(vTextureId <= -1.0) {';\n    src += '\\n\\tcolor = shadowColor;';\n    src += '\\n}';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        src += '\\nelse ';\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(textureId == ${i}.0)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], textureCoord * uSamplerSize[${i}]);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n\n/**\n * @internal\n * @ignore\n * @param shader\n * @param maxTextures\n */\nexport function fillSamplers(shader: TilemapShader, maxTextures: number): void\n{\n    const sampleValues: Array<number> = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    shader.uniforms.uSamplers = sampleValues;\n\n    const samplerSize: Array<number> = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        // These are overwritten by TileRenderer when textures actually bound.\n        samplerSize.push(1.0 / 2048);\n        samplerSize.push(1.0 / 2048);\n    }\n\n    shader.uniforms.uSamplerSize = samplerSize;\n}\n\n/**\n * @internal\n * @ignore\n * @param maxTextures\n * @param fragmentSrc\n * @returns\n */\nexport function generateFragmentSrc(maxTextures: number, fragmentSrc: string): string\n{\n    return fragmentSrc.replace(/%count%/gi, `${maxTextures}`)\n        .replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference, spaced-comment\n///<reference path=\"../global.d.ts\" />\n\nimport * as shaderGenerator from './shaderGenerator';\n\nconst tilemapVertexTemplateSrc = `#version 100\nprecision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aFrame;\nattribute vec2 aAnim;\nattribute float aAnimDivisor;\nattribute float aTextureId;\nattribute float aAlpha;\n\nuniform mat3 projTransMatrix;\nuniform vec2 animationFrame;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vFrame;\nvarying float vAlpha;\n\nvoid main(void)\n{\n   gl_Position = vec4((projTransMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vec2 animCount = floor((aAnim + 0.5) / 2048.0);\n   vec2 animFrameOffset = aAnim - animCount * 2048.0;\n   vec2 currentFrame = floor(animationFrame / aAnimDivisor);\n   vec2 animOffset = animFrameOffset * floor(mod(currentFrame + 0.5, animCount));\n\n   vTextureCoord = aTextureCoord + animOffset;\n   vFrame = aFrame + vec4(animOffset, animOffset);\n   vTextureId = aTextureId;\n   vAlpha = aAlpha;\n}\n`;\n\nconst tilemapFragmentTemplateSrc = `#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nvarying vec2 vTextureCoord;\nvarying vec4 vFrame;\nvarying float vTextureId;\nvarying float vAlpha;\nuniform vec4 shadowColor;\nuniform sampler2D uSamplers[%count%];\nuniform vec2 uSamplerSize[%count%];\n\nvoid main(void)\n{\n   vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\n   float textureId = floor(vTextureId + 0.5);\n\n   vec4 color;\n   %forloop%\n   gl_FragColor = color * vAlpha;\n}\n`;\n\nimport { Buffer, Geometry, Shader, Program, Matrix } from '@pixi/core';\n\n// For some reason, ESLint goes mad with indentation in this file ^&^\n/* eslint-disable no-mixed-spaces-and-tabs, indent */\n\nexport class TilemapShader extends Shader\n{\n    maxTextures = 0;\n\n    constructor(maxTextures: number)\n    {\n\t    super(\n\t        new Program(\n                tilemapVertexTemplateSrc,\n                shaderGenerator.generateFragmentSrc(maxTextures, tilemapFragmentTemplateSrc)\n            ),\n\t        {\n\t            animationFrame: new Float32Array(2),\n\t            uSamplers: [],\n\t            uSamplerSize: [],\n\t            projTransMatrix: new Matrix()\n\t        }\n\t    );\n\n\t    this.maxTextures = maxTextures;\n\t    shaderGenerator.fillSamplers(this, this.maxTextures);\n    }\n}\n\nexport class TilemapGeometry extends Geometry\n{\n    vertSize = 13;\n    vertPerQuad = 4;\n    stride = this.vertSize * 4;\n    lastTimeAccess = 0;\n\n    constructor()\n    {\n\t    super();\n\n\t    const buf = this.buf = new Buffer(new Float32Array(2), true, false);\n\n\t    this.addAttribute('aVertexPosition', buf, 0, false, 0, this.stride, 0)\n\t        .addAttribute('aTextureCoord', buf, 0, false, 0, this.stride, 2 * 4)\n\t        .addAttribute('aFrame', buf, 0, false, 0, this.stride, 4 * 4)\n\t        .addAttribute('aAnim', buf, 0, false, 0, this.stride, 8 * 4)\n\t        .addAttribute('aTextureId', buf, 0, false, 0, this.stride, 10 * 4)\n            .addAttribute('aAnimDivisor', buf, 0, false, 0, this.stride, 11 * 4)\n            .addAttribute('aAlpha', buf, 0, false, 0, this.stride, 12 * 4);\n    }\n\n    buf: Buffer;\n}\n","import { BaseTexture, Buffer, ObjectRenderer, Renderer, utils, WRAP_MODES } from '@pixi/core';\nimport { settings } from './settings';\nimport { TilemapGeometry, TilemapShader } from './TilemapShader';\nimport { TextileResource } from './TextileResource';\n\n// For some reason, ESLint goes mad with indentation in this file ^&^\n/* eslint-disable no-mixed-spaces-and-tabs, indent */\n\n/**\n * Rendering helper pipeline for tilemaps. This plugin is registered automatically.\n */\nexport class TileRenderer extends ObjectRenderer\n{\n    /** The managing renderer */\n    public readonly renderer: Renderer;\n\n    /** The tile animation frame */\n    public tileAnim = [0, 0];\n\n    private ibLen = 0;// index buffer length\n\n    /** The index buffer for the tilemaps to share. */\n    private indexBuffer: Buffer = null;\n\n    /** The shader used to render tilemaps. */\n    private shader: TilemapShader;\n\n    /**\n\t * {@link TextileResource} instances used to upload textures batched in tiled groups. This is\n\t * used only if {@link settings.TEXTURES_PER_TILEMAP} is greater than 1.\n\t */\n    private textiles: Array<TextileResource> = [];\n\n    /** @param renderer - The managing renderer */\n    constructor(renderer: Renderer)\n    {\n\t    super(renderer);\n\n\t    this.shader = new TilemapShader(settings.TEXTURES_PER_TILEMAP);\n\t    this.indexBuffer = new Buffer(undefined, true, true);\n\t    this.checkIndexBuffer(2000);\n\t    this.makeTextiles();\n    }\n\n    /**\n\t * Binds the tile textures to the renderer, and updates the tilemap shader's `uSamplerSize` uniform.\n\t *\n\t * If {@link settings.TEXTILE_UNITS}\n\t *\n\t * @param renderer - The renderer to which the textures are to be bound.\n\t * @param textures - The tile textures being bound.\n\t */\n    bindTileTextures(renderer: Renderer, textures: Array<BaseTexture>): void\n    {\n\t    const len = textures.length;\n        const shader = this.shader;\n\t    const maxTextures = settings.TEXTURES_PER_TILEMAP;\n        const samplerSize: Array<number> = shader.uniforms.uSamplerSize;\n\n\t    if (len > settings.TEXTILE_UNITS * maxTextures)\n\t    {\n            // TODO: Show error message instead of silently failing!\n\t        return;\n\t    }\n\n        if (settings.TEXTILE_UNITS <= 1)\n\t    {\n            // Bind each texture directly & update samplerSize.\n            for (let i = 0; i < textures.length; i++)\n            {\n                const texture = textures[i];\n\n                if (!texture || !texture.valid)\n                {\n                    return;\n                }\n\n                renderer.texture.bind(textures[i], i);\n\n                samplerSize[i * 2] = 1.0 / textures[i].realWidth;\n                samplerSize[(i * 2) + 1] = 1.0 / textures[i].realHeight;\n            }\n\t    }\n        else\n        {\n            // Ensure we have enough textiles, in case settings.TEXTILE_UNITS was modified.\n            this.makeTextiles();\n\n            const usedTextiles = Math.ceil(len / settings.TEXTILE_UNITS);\n\n            // First ensure each textile has all tiles point to the right textures.\n            for (let i = 0; i < len; i++)\n            {\n                const texture = textures[i];\n\n                if (texture && texture.valid)\n                {\n                    const resourceIndex = Math.floor(i / settings.TEXTILE_UNITS);\n                    const tileIndex = i % settings.TEXTILE_UNITS;\n\n                    this.textiles[resourceIndex].tile(tileIndex, texture);\n                }\n            }\n\n            // Then bind the textiles + update samplerSize.\n            for (let i = 0; i < usedTextiles; i++)\n            {\n                renderer.texture.bind(this.textiles[i].baseTexture, i);\n\n                samplerSize[i * 2] = 1.0 / this.textiles[i].width;\n                samplerSize[(i * 2) + 1] = 1.0 / this.textiles[i].baseTexture.height;\n            }\n        }\n\n        shader.uniforms.uSamplerSize = samplerSize;\n    }\n\n    start(): void\n    {\n\t    // sorry, nothing\n    }\n\n    /**\n\t * @internal\n\t * @ignore\n\t */\n    createVb(): TilemapGeometry\n    {\n\t    const geom = new TilemapGeometry();\n\n\t    geom.addIndex(this.indexBuffer);\n\t    geom.lastTimeAccess = Date.now();\n\n\t    return geom;\n    }\n\n    /** @return The {@link TilemapShader} shader that this rendering pipeline is using. */\n    getShader(): TilemapShader { return this.shader; }\n\n    destroy(): void\n    {\n\t    super.destroy();\n\t    // this.rectShader.destroy();\n\t    this.shader = null;\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    public checkIndexBuffer(size: number, _vb: TilemapGeometry = null): void\n    {\n\t    const totalIndices = size * 6;\n\n\t    if (totalIndices <= this.ibLen)\n\t    {\n\t        return;\n\t    }\n\n\t    let len = totalIndices;\n\n\t    while (len < totalIndices)\n\t    {\n\t        len <<= 1;\n\t    }\n\n\t    this.ibLen = totalIndices;\n\t    this.indexBuffer.update(utils.createIndicesForQuads(size,\n\t        settings.use32bitIndex ? new Uint32Array(size * 6) : undefined));\n\n\t    // \tTODO: create new index buffer instead?\n\t    // if (vb) {\n\t    // \tconst curIndex = vb.getIndex();\n\t    // \tif (curIndex !== this.indexBuffer && (curIndex.data as any).length < totalIndices) {\n\t    // \t\tthis.swapIndex(vb, this.indexBuffer);\n\t    // \t}\n\t    // }\n    }\n\n    /** Makes textile resources and initializes {@link TileRenderer.textiles}. */\n    private makeTextiles(): void\n    {\n\t    if (settings.TEXTILE_UNITS <= 1)\n\t    {\n\t        return;\n\t    }\n\n\t    for (let i = 0; i < settings.TEXTILE_UNITS; i++)\n\t    {\n            if (this.textiles[i]) continue;\n\n            const resource = new TextileResource();\n\t        const baseTex = new BaseTexture(resource);\n\n\t        baseTex.scaleMode = settings.TEXTILE_SCALE_MODE;\n\t        baseTex.wrapMode = WRAP_MODES.CLAMP;\n\n            this.textiles[i] = resource;\n\t    }\n    }\n}\n","import { CanvasTileRenderer } from './CanvasTileRenderer';\nimport { CompositeTilemap } from './CompositeTilemap';\nimport { Constant } from './settings';\nimport { TextileResource } from './TextileResource';\nimport { Tilemap } from './Tilemap';\nimport { TilemapShader, TilemapGeometry } from './TilemapShader';\nimport { TileRenderer } from './TileRenderer';\n\n// Prevent SCALE_MODES from becoming lazy import in Constant.ts - which causes a import() in the declaration file,\n// which causes API extractor to fail https://github.com/microsoft/rushstack/issues/2140\n// eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\nimport { extensions, ExtensionType, SCALE_MODES } from '@pixi/core';\n\n// eslint-disable-next-line camelcase\nexport const pixi_tilemap = {\n    CanvasTileRenderer,\n    CompositeRectTileLayer: CompositeTilemap,\n    CompositeTilemap,\n    Constant,\n    TextileResource,\n    MultiTextureResource: TextileResource,\n    RectTileLayer: Tilemap,\n    Tilemap,\n    TilemapShader,\n    TilemapGeometry,\n    RectTileShader: TilemapShader,\n    RectTileGeom: TilemapGeometry,\n    TileRenderer,\n};\n\nexport * from './CanvasTileRenderer';\nexport * from './CompositeTilemap';\nexport * from './settings';\nexport * from './TextileResource';\nexport * from './Tilemap';\nexport * from './TilemapShader';\nexport * from './shaderGenerator';\nexport * from './TileRenderer';\n\nexport { CompositeTilemap as CompositeRectTileLayer } from './CompositeTilemap';\nexport { Tilemap as RectTileLayer } from './Tilemap';\n\nextensions.add({\n    name: 'tilemap',\n    type: ExtensionType.RendererPlugin,\n    ref: TileRenderer as any\n});\n"],"names":["CanvasTileRenderer","renderer","extensions","ExtensionType","settings","SCALE_MODES","value","Constant","POINT_STRUCT","POINT_STRUCT2","POINT_STRUCT_SIZE","Tilemap","Container","tileset","Bounds","plugin","wt","i","tileTexture","x","y","options","baseTexture","textureIndex","texture","Texture","textureList","u","v","tileWidth","tileHeight","animX","animY","rotate","animCountX","animCountY","animDivisor","alpha","pb","offset","count","divisor","points","tileAnim","n","x1","y1","x2","y2","w","h","shader","rectsCount","textures","vb","boundCountPerBuffer","vertexBuf","vertices","vs","bk","arr","sz","textureId","shiftU","shiftV","animWidth","animHeight","animXEncoded","animYEncoded","u0","v0","u1","v1","u2","v2","u3","v3","w2","h2","cX","cY","groupD8","DRAW_MODES","anim","minX","minY","maxX","maxY","rect","CompositeTilemap","tileTextures","texPerChild","len1","len2","tilemap","children","childIndex","tileIndex","child","tex","j","tilemapPlugin","layers","layer","TextileResource","Resource","tiles","index","tile","glTexture","gl","width","height","ALPHA_MODES","doClear","spr","res","generateSampleSrc","maxTextures","src","fillSamplers","sampleValues","samplerSize","generateFragmentSrc","fragmentSrc","tilemapVertexTemplateSrc","tilemapFragmentTemplateSrc","TilemapShader","Shader","Program","shaderGenerator.generateFragmentSrc","Matrix","shaderGenerator.fillSamplers","TilemapGeometry","Geometry","buf","Buffer","TileRenderer","ObjectRenderer","len","usedTextiles","resourceIndex","geom","size","_vb","totalIndices","utils","resource","baseTex","BaseTexture","WRAP_MODES","pixi_tilemap"],"mappings":";;AAeO,MAAMA,EACb;AAAA;AAAA,EAWI,YAAYC,GACZ;AAPW,SAAA,WAAA,CAAC,GAAG,CAAC,GAGG,KAAA,mBAAA,IAKf,KAAK,WAAWA,GACX,KAAA,WAAW,CAAC,GAAG,CAAC;AAAA,EACzB;AAAA,EAEA,OAAO,oBACP;AACI,IAAAC,EAAW,IAAI;AAAA,MACX,MAAM;AAAA,MACN,MAAMC,EAAc;AAAA,MACpB,KAAKH;AAAA,IAAA,CACR;AAAA,EACL;AAAA;AAAA,EAGA,OAAO,YAAYC,GACnB;AACQ,QAAA,CAACA,EAAS,QAAQ;AAEZ,YAAA,IAAI,MAAM,2BAA2B;AAG/C,WAAOA,EAAS,QAAQ;AAAA,EAC5B;AACJ;AC5CO,MAAMG,IAAW;AAAA;AAAA,EAEpB,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQtB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWf,eAAe;AAAA;AAAA,EAGf,oBAAoBC,GAAY;AAAA;AAAA,EAGhC,eAAe;AAAA;AAAA,EAGf,UAAU;AAAA;AAAA,EAGV,IAAI,cAAsB;AAAE,WAAO,KAAK;AAAA,EAAc;AAAA,EACtD,IAAI,YAAYC,GAAe;AAAE,SAAK,eAAeA;AAAA,EAAO;AAAA,EAE5D,IAAI,YAAoB;AAAE,WAAO,KAAK;AAAA,EAAoB;AAAA,EAC1D,IAAI,UAAUA,GAAe;AAAE,SAAK,qBAAqBA;AAAA,EAAO;AAAA,EAEhE,IAAI,sBAA8B;AAAE,WAAO,KAAK;AAAA,EAAe;AAAA,EAC/D,IAAI,oBAAoBA,GAAe;AAAE,SAAK,gBAAgBA;AAAA,EAAO;AACzE,GAGaC,KAAWH;ACzCxB,IAAKI,uBAAAA,OAEDA,EAAAC,EAAA,IAAA,CAAA,IAAA,KACAD,EAAAC,EAAA,IAAA,CAAA,IAAA,KACAD,EAAAC,EAAA,IAAA,CAAA,IAAA,KACAD,EAAAC,EAAA,IAAA,CAAA,IAAA,KACAD,EAAAC,EAAA,aAAA,CAAA,IAAA,cACAD,EAAAC,EAAA,cAAA,CAAA,IAAA,eACAD,EAAAC,EAAA,SAAA,CAAA,IAAA,UACAD,EAAAC,EAAA,SAAA,CAAA,IAAA,UACAD,EAAAC,EAAA,SAAA,CAAA,IAAA,UACAD,EAAAC,EAAA,gBAAA,CAAA,IAAA,iBACAD,EAAAC,EAAA,eAAA,EAAA,IAAA,gBACAD,EAAAC,EAAA,eAAA,EAAA,IAAA,gBACAD,EAAAC,EAAA,eAAA,EAAA,IAAA,gBACAD,EAAAC,EAAA,QAAA,EAAA,IAAA,SAfCD,IAAAA,MAAA,CAAA,CAAA;AAkBE,MAAME,IAAqB,OAAO,KAAKF,EAAY,EAAE,SAAS;AA+B9D,MAAMG,UAAgBC,GAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAiDI,YAAYC,GACZ;AACU,aAlDV,KAAA,cAAc,IAAI,aAAa,CAAC,GAAK,GAAK,GAAK,GAAG,CAAC,GAC9B,KAAA,aAAA,MAOrB,KAAO,WAA6B,MAMf,KAAA,qBAAA,GAGX,KAAA,UAAA,GAGA,KAAA,UAAA,GAGQ,KAAA,kBAAA,IAaC,KAAA,gBAAgB,IAAIC,MAGvC,KAAU,kBAAkB,IAG5B,KAAQ,YAA2B,IAqOnC,KAAA,eAAe,CAACb,MAChB;AACU,YAAAc,IAASf,EAAmB,YAAYC,CAAQ;AAElD,UAAAc,KAAU,CAACA,EAAO,kBACtB;AACI,cAAMC,IAAK,KAAK;AAEhB,QAAAf,EAAS,cAAc,cAAc;AAAA,UACjCe,EAAG;AAAA,UACHA,EAAG;AAAA,UACHA,EAAG;AAAA,UACHA,EAAG;AAAA,UACHA,EAAG,KAAKf,EAAS;AAAA,UACjBe,EAAG,KAAKf,EAAS;AAAA,QAAA;AAAA,MAEzB;AAEA,WAAK,iBAAiBA,CAAQ;AAAA,IAAA,GA4ClC,KAAQ,OAAO,GACf,KAAQ,KAAsB,MAC9B,KAAQ,WAAwB,MAChC,KAAQ,UAAwB,MAChC,KAAQ,SAAsB,MA9R1B,KAAK,WAAWY,CAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,aACA;AACI,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAWA,IAA4C,IACvD;AACI,IAAK,MAAM,QAAQA,CAAO,MAEtBA,IAAU,CAACA,CAAO;AAEtB,aAASI,IAAI,GAAGA,IAAIJ,EAAQ,QAAQI;AAE3B,MAAAJ,EAAQI,CAAC,EAAyB,gBAEnCJ,EAAQI,CAAC,IAAKJ,EAAQI,CAAC,EAAyB;AAIxD,gBAAK,UAAUJ,GAER;AAAA,EACX;AAAA;AAAA,EAGA,QACA;AACI,gBAAK,UAAU,SAAS,GACxB,KAAK,qBAAqB,GAC1B,KAAK,cAAc,SACnB,KAAK,kBAAkB,IAEhB;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,KACIK,GACAC,GACAC,GACAC,IAYI,CAAA,GAER;AACQ,QAAAC,GACAC,IAAe;AAEf,QAAA,OAAOL,KAAgB;AAER,MAAAK,IAAAL,GACDI,IAAA,KAAK,QAAQC,CAAY;AAAA,SAG3C;AACQ,UAAAC;AAEA,MAAA,OAAON,KAAgB,WAEbM,IAAAC,EAAQ,KAAKP,CAAW,IAIxBM,IAAAN;AAGd,YAAMQ,IAAc,KAAK;AAEzB,eAAST,IAAI,GAAGA,IAAIS,EAAY,QAAQT;AAEpC,YAAIS,EAAYT,CAAC,MAAMO,EAAQ,qBAC/B;AACmB,UAAAD,IAAAN;AACf;AAAA,QACJ;AAGJ,MAAI,iBAAiBO,MAEjBH,EAAQ,IAAIA,EAAQ,KAAKG,EAAQ,MAAM,GACvCH,EAAQ,IAAIA,EAAQ,KAAKG,EAAQ,MAAM,GACvCH,EAAQ,YAAYA,EAAQ,aAAaG,EAAQ,KAAK,OACtDH,EAAQ,aAAaA,EAAQ,cAAcG,EAAQ,KAAK,SAG5DF,IAAcE,EAAQ;IAC1B;AAEI,QAAA,CAACF,KAAeC,IAAe;AAE/B,qBAAQ,MAAM,wDAAwD,GAE/D;AAGL,UAAA;AAAA,MACF,GAAAI,IAAI;AAAA,MACJ,GAAAC,IAAI;AAAA,MACJ,WAAAC,IAAYP,EAAY;AAAA,MACxB,YAAAQ,IAAaR,EAAY;AAAA,MACzB,OAAAS,IAAQ;AAAA,MACR,OAAAC,IAAQ;AAAA,MACR,QAAAC,IAAS;AAAA,MACT,YAAAC,IAAa;AAAA,MACb,YAAAC,IAAa;AAAA,MACb,aAAAC,IAAc;AAAA,MACd,OAAAC,IAAQ;AAAA,IACR,IAAAhB,GAEEiB,IAAK,KAAK;AAEhB,gBAAK,kBAAkB,KAAK,mBAAmBP,IAAQ,KAAKC,IAAQ,GAEpEM,EAAG,KAAKX,CAAC,GACTW,EAAG,KAAKV,CAAC,GACTU,EAAG,KAAKnB,CAAC,GACTmB,EAAG,KAAKlB,CAAC,GACTkB,EAAG,KAAKT,CAAS,GACjBS,EAAG,KAAKR,CAAU,GAClBQ,EAAG,KAAKL,CAAM,GACXK,EAAA,KAAKP,IAAQ,CAAC,GACdO,EAAA,KAAKN,IAAQ,CAAC,GACjBM,EAAG,KAAKf,CAAY,GACpBe,EAAG,KAAKJ,CAAU,GAClBI,EAAG,KAAKH,CAAU,GAClBG,EAAG,KAAKF,CAAW,GACnBE,EAAG,KAAKD,CAAK,GAER,KAAA,cAAc,YAAYlB,GAAGC,GAAGD,IAAIU,GAAWT,IAAIU,GAAY,GAAG,CAAC,GAEjE;AAAA,EACX;AAAA;AAAA,EAGA,WAAWG,GACX;AACI,UAAMK,IAAK,KAAK;AAEhB,IAAAA,EAAGA,EAAG,UAAU5B,IAAoB,EAA2B,IAAIuB;AAAA,EACvE;AAAA;AAAA,EAGA,UAAUM,GAAgBC,GAC1B;AACI,UAAMF,IAAK,KAAK;AAEhB,IAAAA,EAAGA,EAAG,UAAU5B,IAAoB,EAAoB,IAAI6B,GAC5DD,EAAGA,EAAG,UAAU5B,IAAoB,GAA0B,IAAI8B;AAAA,EAEtE;AAAA;AAAA,EAGA,UAAUD,GAAgBC,GAC1B;AACI,UAAMF,IAAK,KAAK;AAEhB,IAAAA,EAAGA,EAAG,UAAU5B,IAAoB,EAAoB,IAAI6B,GAC5DD,EAAGA,EAAG,UAAU5B,IAAoB,GAA0B,IAAI8B;AAAA,EACtE;AAAA;AAAA,EAGA,gBAAgBC,GAChB;AACI,UAAMH,IAAK,KAAK;AAEhB,IAAAA,EAAGA,EAAG,UAAU5B,IAAoB,GAA0B,IAAI+B;AAAA,EACtE;AAAA,EAEA,UAAUJ,GACV;AACI,UAAMC,IAAK,KAAK;AAEhB,IAAAA,EAAGA,EAAG,UAAU5B,IAAoB,GAAmB,IAAI2B;AAAA,EAC/D;AAAA,EAuBA,iBAAiBpC,GACjB;AACQ,QAAA,KAAK,QAAQ,WAAW;AAAG;AAC/B,UAAMyC,IAAS,KAAK,WACdC,IAAW,KAAK,YAAa1C,EAAS,QAAQ,WAAWA,EAAS,QAAQ,QAAQ;AAE/E,IAAAA,EAAA,cAAc,cAAc,YAAY;AACxC,aAAAgB,IAAI,GAAG2B,IAAIF,EAAO,QAAQzB,IAAI2B,GAAG3B,KAAKP,GAC/C;AACQ,UAAAmC,IAAKH;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAc,GAC9B6B,IAAKJ;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAc;AAC5B,YAAA8B,IAAKL;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAc,GAC9B+B,IAAKN;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAc,GAC9BgC,IAAIP;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAuB,GACtCiC,IAAIR;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAwB;AAE7C,MAAA4B,KAAMH;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAmB,IAAI0B,EAAS,CAAC,GAClDG,KAAMJ;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAmB,IAAI0B,EAAS,CAAC;AAE5C,YAAApB,IAAemB;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAA0B,GACpDoB,IAAQK;AAAA,QAAOzB,IAAI;AAAA;AAAA,MAAkB;AAI3C,MAAIM,KAAgB,KAAK,KAAK,QAAQA,CAAY,KAErCtB,EAAA,cAAc,cAAc,cAAcoC,GACnDpC,EAAS,cAAc,cAAc;AAAA,QAChC,KAAK,QAAQsB,CAAY,EAAU,kBAAkB;AAAA,QACtDsB;AAAA,QAAIC;AAAA,QAAIG;AAAA,QAAGC;AAAA,QAAGH;AAAA,QAAIC;AAAA,QAAIC;AAAA,QAAGC;AAAA,MAAA,MAKpBjD,EAAA,cAAc,cAAc,cAAc,KACnDA,EAAS,cAAc,cAAc,SAAS8C,GAAIC,GAAIC,GAAGC,CAAC,IAErDjD,EAAA,cAAc,cAAc,cAAc;AAAA,IACvD;AAAA,EACJ;AAAA,EAQQ,YACR;AACI,IAAI,KAAK,OAEL,KAAK,GAAG,WACR,KAAK,KAAK;AAAA,EAElB;AAAA,EAEA,OAAOA,GACP;AACU,UAAAc,IAAUd,EAAS,QAAgB,SACnCkD,IAASpC,EAAO;AAEb,IAAAd,EAAA,MAAM,kBAAkBc,CAAM,GAClC,KAAA,aAAaoC,EAAO,SAAS,iBAE7BlD,EAAA,eACA,SACA,iBACA,OAAO,KAAK,UAAU,EACtB,OAAO,KAAK,cAAc,GAExBkD,EAAA,SAAS,cAAc,KAAK,aACnCA,EAAO,SAAS,iBAAiB,KAAK,YAAYpC,EAAO,UAEpD,KAAA,gBAAgBd,GAAUc,CAAM;AAAA,EACzC;AAAA,EAEA,gBAAgBd,GAAoBc,GACpC;AACI,UAAM2B,IAAS,KAAK;AAEpB,QAAIA,EAAO,WAAW;AAAG;AACnB,UAAAU,IAAaV,EAAO,SAAShC,GAE7ByC,IAASpC,EAAO,aAChBsC,IAAW,KAAK;AAEtB,QAAIA,EAAS,WAAW;AAAG;AAEpB,IAAAtC,EAAA,iBAAiBd,GAAUoD,CAAQ,GACjCpD,EAAA,OAAO,KAAKkD,GAAQ,EAAK;AAGlC,QAAIG,IAAK,KAAK;AAEd,IAAKA,MAEDA,IAAKvC,EAAO,YACZ,KAAK,KAAKuC,GACV,KAAK,OAAQA,EAAW,IACxB,KAAK,WAAW,MAChB,KAAK,qBAAqB,IAGvBvC,EAAA,iBAAiBqC,GAAYE,CAAE;AACtC,UAAMC,IAAsBnD,EAAS,eAE/BoD,IAAYF,EAAG,UAAU,iBAAiB,GAE1CG,IAAWL,IAAaE,EAAG;AAEjC,QAAIG,MAAa,GACb;AAAA,UAAA,KAAK,uBAAuBA,GAChC;AACI,aAAK,qBAAqBA;AACpB,cAAAC,IAAKJ,EAAG,SAASG;AAEvB,YAAI,CAAC,KAAK,YAAY,KAAK,SAAS,aAAaC,GACjD;AAEI,cAAIC,IAAKL,EAAG;AAEZ,iBAAOK,IAAKD;AAEF,YAAAC,KAAA;AAEL,eAAA,WAAW,IAAI,YAAYA,CAAE,GAClC,KAAK,UAAU,IAAI,aAAa,KAAK,QAAQ,GAC7C,KAAK,SAAS,IAAI,YAAY,KAAK,QAAQ,GACjCH,EAAA,OAAO,KAAK,QAAQ;AAAA,QAClC;AAEA,cAAMI,IAAM,KAAK;AAGjB,YAAIC,IAAK,GAELC,IAAY,GACZC,IAAiB,KAAK,SACtBC,IAAiB,KAAK;AAK1B,iBAAS/C,IAAI,GAAGA,IAAIyB,EAAO,QAAQzB,KAAKP,GACxC;AAGI,cAAI,KAAK,iBACT;AACU,kBAAAa,IAAemB;AAAA,cAAOzB,IAAI;AAAA;AAAA,YAA0B;AAE1D,YAAIsC,IAAsB,KAGtBO,IAAavC,KAAgB,GACpBwC,IAAA,KAAK,WAAWxC,IAAe,IAC/ByC,IAAA,KAAK,WAAYzC,KAAgB,IAAK,OAInCuC,IAAAvC,GACHwC,IAAA,GACAC,IAAA;AAAA,UAEjB;AACM,gBAAA7C,IAAIuB;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAc,GAC7BG,IAAIsB;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAc,GAC7BgC,IAAIP;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAuB,GACtCiC,IAAIR;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAwB,GACvCU,IAAIe;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAA,IAAkB8C,GACjCnC,IAAIc;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAA,IAAkB+C;AACnC,cAAA/B,IAASS;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAmB;AAErC,gBAAAc,KAAQW;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAmB,GACtCe,KAAQU;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAmB,GACtCgD,KAAYvB;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAA,KAA8B,MACrDiD,KAAaxB;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAA,KAA8B,MAEtDkD,IAAepC,KAASkC,KAAY,MACpCG,IAAepC,KAASkC,KAAa,MACrC9B,IAAcM;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAyB,GAClDoB,IAAQK;AAAA,YAAOzB,IAAI;AAAA;AAAA,UAAkB;AAEvC,cAAAoD,GACAC,GAAgBC,GAChBC,GAAgBC,GAChBC,GAAgBC,GAChBC;AAEJ,cAAI3C,MAAW;AAEN,YAAAoC,IAAA1C,GACA2C,IAAA1C,GACL2C,IAAK5C,IAAIsB,GACJuB,IAAA5C,GACL6C,IAAK9C,IAAIsB,GACTyB,IAAK9C,IAAIsB,GACJyB,IAAAhD,GACLiD,IAAKhD,IAAIsB;AAAA,eAGb;AACI,gBAAI2B,IAAK5B,IAAI,GACT6B,IAAK5B,IAAI;AAET,YAAAjB,IAAS,MAAM,MAEf4C,IAAK3B,IAAI,GACT4B,IAAK7B,IAAI;AAEb,kBAAM8B,IAAKpD,IAAIkD,GACTG,IAAKpD,IAAIkD;AAEf,YAAA7C,IAASgD,EAAQ,IAAIhD,GAAQgD,EAAQ,EAAE,GACvCZ,IAAKU,IAAMF,IAAKI,EAAQ,GAAGhD,CAAM,GACjCqC,IAAKU,IAAMF,IAAKG,EAAQ,GAAGhD,CAAM,GAExBA,IAAAgD,EAAQ,IAAIhD,GAAQ,CAAC,GAC9BsC,IAAKQ,IAAMF,IAAKI,EAAQ,GAAGhD,CAAM,GACjCuC,IAAKQ,IAAMF,IAAKG,EAAQ,GAAGhD,CAAM,GAExBA,IAAAgD,EAAQ,IAAIhD,GAAQ,CAAC,GAC9BwC,IAAKM,IAAMF,IAAKI,EAAQ,GAAGhD,CAAM,GACjCyC,IAAKM,IAAMF,IAAKG,EAAQ,GAAGhD,CAAM,GAExBA,IAAAgD,EAAQ,IAAIhD,GAAQ,CAAC,GAC9B0C,IAAKI,IAAMF,IAAKI,EAAQ,GAAGhD,CAAM,GACjC2C,IAAKI,IAAMF,IAAKG,EAAQ,GAAGhD,CAAM;AAAA,UACrC;AAEA,UAAA2B,EAAIC,GAAI,IAAI1C,GACZyC,EAAIC,GAAI,IAAIzC,GACZwC,EAAIC,GAAI,IAAIQ,GACZT,EAAIC,GAAI,IAAIS,GACRV,EAAAC,GAAI,IAAIlC,IAAI,KACZiC,EAAAC,GAAI,IAAIjC,IAAI,KACZgC,EAAAC,GAAI,IAAIlC,IAAIsB,IAAI,KAChBW,EAAAC,GAAI,IAAIjC,IAAIsB,IAAI,KACpBU,EAAIC,GAAI,IAAIM,GACZP,EAAIC,GAAI,IAAIO,GACZR,EAAIC,GAAI,IAAIC,GACZF,EAAIC,GAAI,IAAIzB,GACZwB,EAAIC,GAAI,IAAIxB,GAERuB,EAAAC,GAAI,IAAI1C,IAAI8B,GAChBW,EAAIC,GAAI,IAAIzC,GACZwC,EAAIC,GAAI,IAAIU,GACZX,EAAIC,GAAI,IAAIW,GACRZ,EAAAC,GAAI,IAAIlC,IAAI,KACZiC,EAAAC,GAAI,IAAIjC,IAAI,KACZgC,EAAAC,GAAI,IAAIlC,IAAIsB,IAAI,KAChBW,EAAAC,GAAI,IAAIjC,IAAIsB,IAAI,KACpBU,EAAIC,GAAI,IAAIM,GACZP,EAAIC,GAAI,IAAIO,GACZR,EAAIC,GAAI,IAAIC,GACZF,EAAIC,GAAI,IAAIzB,GACZwB,EAAIC,GAAI,IAAIxB,GAERuB,EAAAC,GAAI,IAAI1C,IAAI8B,GACZW,EAAAC,GAAI,IAAIzC,IAAI8B,GAChBU,EAAIC,GAAI,IAAIY,GACZb,EAAIC,GAAI,IAAIa,GACRd,EAAAC,GAAI,IAAIlC,IAAI,KACZiC,EAAAC,GAAI,IAAIjC,IAAI,KACZgC,EAAAC,GAAI,IAAIlC,IAAIsB,IAAI,KAChBW,EAAAC,GAAI,IAAIjC,IAAIsB,IAAI,KACpBU,EAAIC,GAAI,IAAIM,GACZP,EAAIC,GAAI,IAAIO,GACZR,EAAIC,GAAI,IAAIC,GACZF,EAAIC,GAAI,IAAIzB,GACZwB,EAAIC,GAAI,IAAIxB,GAEZuB,EAAIC,GAAI,IAAI1C,GACRyC,EAAAC,GAAI,IAAIzC,IAAI8B,GAChBU,EAAIC,GAAI,IAAIc,GACZf,EAAIC,GAAI,IAAIe,GACRhB,EAAAC,GAAI,IAAIlC,IAAI,KACZiC,EAAAC,GAAI,IAAIjC,IAAI,KACZgC,EAAAC,GAAI,IAAIlC,IAAIsB,IAAI,KAChBW,EAAAC,GAAI,IAAIjC,IAAIsB,IAAI,KACpBU,EAAIC,GAAI,IAAIM,GACZP,EAAIC,GAAI,IAAIO,GACZR,EAAIC,GAAI,IAAIC,GACZF,EAAIC,GAAI,IAAIzB,GACZwB,EAAIC,GAAI,IAAIxB;AAAA,QAChB;AAEA,QAAAmB,EAAU,OAAOI,CAAG;AAAA,MACxB;AAEC,MAAA3D,EAAS,SAAiB,KAAKqD,GAAIH,CAAM,GAC1ClD,EAAS,SAAS,KAAKiF,GAAW,WAAW9B,IAAa,GAAG,CAAC;AAAA;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW+B,GACX;AACI,WAAI,QAAK,uBAAuB,KAAK,UAAU,UACvCA,KAAQ,KAAK;AAAA,EAMzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cACA;AACS,SAAA,qBAAqB,KAAK,UAAU;AAAA,EAC7C;AAAA;AAAA,EAGU,mBACV;AACI,UAAM,EAAE,MAAAC,GAAM,MAAAC,GAAM,MAAAC,GAAM,MAAAC,MAAS,KAAK;AAExC,SAAK,QAAQ,SAAS,KAAK,WAAWH,GAAMC,GAAMC,GAAMC,CAAI;AAAA,EAChE;AAAA;AAAA,EAGO,eAAeC,GACtB;AAEQ,WAAA,KAAK,SAAS,WAAW,IAElB,KAAK,cAAc,aAAaA,CAAI,IAGxC,MAAM,eAAe,KAAK,MAAMA,CAAI;AAAA,EAC/C;AAAA;AAAA,EAGA,QAAQnE,GACR;AACI,UAAM,QAAQA,CAAO,GACrB,KAAK,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAASG,GAAoCL,GAAWC,GAAWW,GAAeC,GAClF;AACS,gBAAA;AAAA,MACDR;AAAA,MACAL;AAAA,MACAC;AAAA,MACA;AAAA,QACI,OAAAW;AAAA,QACA,OAAAC;AAAA,MACJ;AAAA,IAAA,GAGG;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QACIT,GACAI,GACAC,GACAT,GACAC,GACAS,GACAC,GACAC,IAAQ,GACRC,IAAQ,GACRC,IAAS,GACTC,IAAa,MACbC,IAAa,MACbC,IAAc,GACdC,IAAQ,GAEZ;AACI,WAAO,KAAK;AAAA,MACRd;AAAA,MACAJ;AAAA,MAAGC;AAAA,MACH;AAAA,QACI,GAAAO;AAAA,QAAG,GAAAC;AAAA,QAAG,WAAAC;AAAA,QAAW,YAAAC;AAAA,QAAY,OAAAC;AAAA,QAAO,OAAAC;AAAA,QAAO,QAAAC;AAAA,QAAQ,YAAAC;AAAA,QAAY,YAAAC;AAAA,QAAY,aAAAC;AAAA,QAAa,OAAAC;AAAA,MAC5F;AAAA,IAAA;AAAA,EAER;AACJ;AC/qBO,MAAMoD,UAAyB7E,GACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BI,YAAYC,GACZ;AACU,aAhBV,KAAO,WAA6B,MAGpC,KAAU,sBAA+B,MAEzC,KAAQ,qBAAqB,GACrB,KAAA,cAAc,IAAI,aAAa,CAAC,GAAK,GAAK,GAAK,GAAG,CAAC,GAC3D,KAAQ,aAAqB,MA8a7B,KAAA,aAAa,KAAK,SAnad,KAAK,QAAQA,CAAO,GACpB,KAAK,qBAAqBT,EAAS;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,QAAQsF,GACR;AACI,IAAKA,MAEDA,IAAe,CAAA;AAGnB,UAAMC,IAAc,KAAK,oBACnBC,IAAO,KAAK,SAAS,QACrBC,IAAO,KAAK,KAAKH,EAAa,SAASC,CAAW;AAE/C,aAAA1E,IAAI,GAAGA,IAAI,KAAK,IAAI2E,GAAMC,CAAI,GAAG5E;AAErC,WAAK,SAASA,CAAC,EAAc;AAAA,QAC1ByE,EAAa,MAAMzE,IAAI0E,IAAc1E,IAAI,KAAK0E,CAAW;AAAA,MAAA;AAGjE,aAAS1E,IAAI2E,GAAM3E,IAAI4E,GAAM5E,KAC7B;AACU,YAAA6E,IAAU,IAAInF,EAAQ+E,EAAa,MAAMzE,IAAI0E,IAAc1E,IAAI,KAAK0E,CAAW,CAAC;AAEtF,MAAAG,EAAQ,kBAAkB,IAC1BA,EAAQ,UAAU1F,EAAS,eAC3B0F,EAAQ,UAAU1F,EAAS,eAG3B,KAAK,SAAS0F,CAAO;AAAA,IACzB;AAEO,WAAA;AAAA,EACX;AAAA;AAAA,EAGA,QACA;AACI,aAAS7E,IAAI,GAAGA,IAAI,KAAK,SAAS,QAAQA;AAErC,WAAK,SAASA,CAAC,EAAc,MAAM;AAGxC,gBAAK,qBAAqB,GAEnB;AAAA,EACX;AAAA;AAAA,EAGA,WAAWgB,GACX;AACI,WAAI,KAAK,uBAEA,KAAA,oBAAoB,WAAWA,CAAM,GAGvC;AAAA,EACX;AAAA;AAAA,EAGA,UAAUM,GAAgBC,GAC1B;AACI,WAAI,KAAK,uBAEA,KAAA,oBAAoB,UAAUD,GAAQC,CAAK,GAG7C;AAAA,EACX;AAAA;AAAA,EAGA,UAAUD,GAAgBC,GAC1B;AACI,WAAI,KAAK,uBAEA,KAAA,oBAAoB,UAAUD,GAAQC,CAAK,GAG7C;AAAA,EACX;AAAA;AAAA,EAGA,gBAAgBC,GAChB;AACI,WAAI,KAAK,uBAEA,KAAA,oBAAoB,gBAAgBA,CAAO,GAG7C;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,KACIvB,GACAC,GACAC,GACAC,IAYI,CAAA,GAER;AACI,QAAIyE,IAAmB;AACvB,UAAMC,IAAW,KAAK;AAIlB,QAFJ,KAAK,sBAAsB,MAEvB,OAAO7E,KAAgB,UAC3B;AACU,YAAA8E,IAAa9E,IAAc,KAAK,sBAAsB;AAC5D,UAAI+E,IAAY;AAIhB,UAFAH,IAAUC,EAASC,CAAU,GAExBF;AAWD,QAAAG,IAAY/E,IAAc,KAAK;AAAA,WAVnC;AAII,YAHA4E,IAAUC,EAAS,CAAC,GAGhB,CAACD;AAAgB,iBAAA;AAET,QAAAG,IAAA;AAAA,MAAA;AAOR,MAAAH,EAAA;AAAA,QACJG;AAAA,QACA9E;AAAA,QACAC;AAAA,QACAC;AAAA,MAAA;AAAA,IACJ,OAGJ;AACQ,MAAA,OAAOH,KAAgB,aAETA,IAAAO,EAAQ,KAAKP,CAAW;AAI1C,eAASD,IAAI,GAAGA,IAAI8E,EAAS,QAAQ9E,KACrC;AACU,cAAAiF,IAAQH,EAAS9E,CAAC,GAClBkF,IAAMD,EAAM;AAElB,iBAASE,IAAI,GAAGA,IAAID,EAAI,QAAQC;AAE5B,cAAID,EAAIC,CAAC,MAAMlF,EAAY,aAC3B;AACc,YAAA4E,IAAAI;AACV;AAAA,UACJ;AAGJ,YAAIJ;AAEA;AAAA,MAER;AAGA,UAAI,CAACA,GACL;AAEI,iBAAS7E,IAAI8E,EAAS,SAAS,GAAG9E,KAAK,GAAGA,KAC1C;AACU,gBAAAiF,IAAQH,EAAS9E,CAAC;AAExB,cAAIiF,EAAM,WAAA,EAAa,SAAS,KAAK,oBACrC;AACc,YAAAJ,IAAAI,GACVA,EAAM,WAAW,EAAE,KAAKhF,EAAY,WAAW;AAC/C;AAAA,UACJ;AAAA,QACJ;AAGA,QAAK4E,MAESA,IAAA,IAAInF,EAAQO,EAAY,WAAW,GAC7C4E,EAAQ,kBAAkB,IAC1BA,EAAQ,UAAU1F,EAAS,eAC3B0F,EAAQ,UAAU1F,EAAS,eAE3B,KAAK,SAAS0F,CAAO;AAAA,MAE7B;AAEQ,MAAAA,EAAA;AAAA,QACJ5E;AAAA,QACAC;AAAA,QACAC;AAAA,QACAC;AAAA,MAAA;AAAA,IAER;AAEA,gBAAK,sBAAsByE,GAEpB;AAAA,EACX;AAAA,EAEA,aAAa7F,GACb;AACQ,QAAA,CAAC,KAAK,WAAW,KAAK,cAAc,KAAK,CAAC,KAAK;AAE/C;AAGE,UAAAoG,IAAgBrG,EAAmB,YAAYC,CAAQ;AAEzD,QAAAoG,KAAiB,CAACA,EAAc,kBACpC;AACI,YAAMrF,IAAK,KAAK;AAEhB,MAAAf,EAAS,cAAc,cAAc;AAAA,QACjCe,EAAG;AAAA,QACHA,EAAG;AAAA,QACHA,EAAG;AAAA,QACHA,EAAG;AAAA,QACHA,EAAG,KAAKf,EAAS;AAAA,QACjBe,EAAG,KAAKf,EAAS;AAAA,MAAA;AAAA,IAEzB;AAEA,UAAMqG,IAAS,KAAK;AAEpB,aAASrF,IAAI,GAAGA,IAAIqF,EAAO,QAAQrF,KACnC;AACU,YAAAsF,IAASD,EAAOrF,CAAC;AAEvB,MAAAsF,EAAM,WAAW,KAAK,UACtBA,EAAM,iBAAiBtG,CAAQ;AAAA,IACnC;AAAA,EACJ;AAAA,EAEA,OAAOA,GACP;AACQ,QAAA,CAAC,KAAK,WAAW,KAAK,cAAc,KAAK,CAAC,KAAK;AAE/C;AAGE,UAAAc,IAASd,EAAS,QAAQ,SAC1BkD,IAASpC,EAAO;AAEb,IAAAd,EAAA,MAAM,kBAAkBc,CAAM,GAGlC,KAAA,aAAaoC,EAAO,SAAS,iBACzBlD,EAAA,eAAe,SAAS,iBAAiB,OAAO,KAAK,UAAU,EAAE,OAAO,KAAK,cAAc,GAC7FkD,EAAA,SAAS,cAAc,KAAK,aACnCA,EAAO,SAAS,iBAAiB,KAAK,YAAYpC,EAAO,UAEhDd,EAAA,OAAO,KAAKkD,GAAQ,EAAK;AAElC,UAAMmD,IAAS,KAAK;AAEpB,aAASrF,IAAI,GAAGA,IAAIqF,EAAO,QAAQrF;AAE9B,MAAAqF,EAAOrF,CAAC,EAAc,gBAAgBhB,GAAUc,CAAM;AAAA,EAE/D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAWoE,GACX;AACI,UAAMmB,IAAS,KAAK;AAEhB,QAAA,KAAK,uBAAuBA,EAAO;AAE5B,aAAA;AAEX,aAAS,IAAI,GAAG,IAAIA,EAAO,QAAQ;AAE/B,UAAKA,EAAO,CAAC,EAAc,WAAWnB,CAAI;AAE/B,eAAA;AAIR,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cACA;AACI,UAAMmB,IAAS,KAAK;AAEpB,SAAK,qBAAqBA,EAAO;AACjC,aAASrF,IAAI,GAAGA,IAAIqF,EAAO,QAAQrF;AAE9B,MAAAqF,EAAOrF,CAAC,EAAc;EAE/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SACIO,GACAL,GACAC,GACAW,GACAC,GACAiC,GACAC,GACA9B,GACAC,GAEJ;AACI,WAAO,KAAK;AAAA,MACRb;AAAA,MACAL;AAAA,MAAGC;AAAA,MACH;AAAA,QACI,OAAAW;AAAA,QACA,OAAAC;AAAA,QACA,YAAYiC;AAAA,QACZ,YAAYC;AAAA,QACZ,aAAA9B;AAAA,QACA,OAAAC;AAAA,MACJ;AAAA,IAAA;AAAA,EAER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QACId,GACAI,GACAC,GACAT,GACAC,GACAS,GACAC,GACAC,GACAC,GACAC,GACAgC,GACAC,GAEJ;AACU,UAAA8B,IAAqBzE,IAAe,KAAK,sBAAsB,GAC/DuC,IAAoBvC,IAAe,KAAK;AAE1C,WAAA,KAAK,SAASyE,CAAU,KAAM,KAAK,SAASA,CAAU,EAAc,gBAE/D,KAAA,sBAAuB,KAAK,SAASA,CAAU,GACpD,KAAK,oBAAoB;AAAA,MACrBlC;AAAA,MAAWnC;AAAA,MAAGC;AAAA,MAAGT;AAAA,MAAGC;AAAA,MAAGS;AAAA,MAAWC;AAAA,MAAYC;AAAA,MAAOC;AAAA,MAAOC;AAAA,MAAQgC;AAAA,MAAWC;AAAA,IAAA,KAKnF,KAAK,sBAAsB,MAGxB;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,cAAsB;AAAE,WAAO,KAAK;AAAA,EAAoB;AAChE;AC/eO,MAAMsC,UAAwBC,GACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeI,YAAYpF,IAA0BjB,GACtC;AACI;AAAA,MACIiB,EAAQ,gBAAgB;AAAA,MACxBA,EAAQ,gBAAgB,KAAK,KAAKA,EAAQ,gBAAgB,CAAC;AAAA,IAAA,GAjBnE,KAAO,cAA2B,MAMlC,KAAQ,eAA2B;AAc/B,UAAMqF,IAAuB,KAAK,QAAQ,IAAI,MAAMrF,EAAQ,aAAa;AAEpE,SAAA,UAAU,CAAC,CAACA,EAAQ,UACzB,KAAK,YAAYA,EAAQ;AAEzB,aAAS+E,IAAI,GAAGA,IAAI/E,EAAQ,eAAe+E;AAEvC,MAAAM,EAAMN,CAAC,IAAI;AAAA,QACP,SAAS;AAAA,QACT,GAAG/E,EAAQ,iBAAiB+E,IAAI;AAAA,QAChC,GAAG/E,EAAQ,iBAAiB+E,KAAK;AAAA,QACjC,aAAa3E,EAAQ,MAAM;AAAA,MAAA;AAAA,EAGvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAKkF,GAAenF,GACpB;AACU,UAAAoF,IAAO,KAAK,MAAMD,CAAK;AAEzB,IAAAC,EAAK,gBAAgBpF,MAKzBoF,EAAK,cAAcpF,GACnB,KAAK,YAAY,UAEjB,KAAK,MAAMmF,CAAK,EAAE,UAAW,KAAK,YAAoB;AAAA,EAC1D;AAAA;AAAA,EAGA,KAAKrF,GACL;AACI,QAAI,KAAK;AAEC,YAAA,IAAI,MAAM,oDAAoD;AAGxE,SAAK,cAAcA,GACnB,MAAM,KAAKA,CAAW;AAAA,EAC1B;AAAA;AAAA,EAGA,OAAOrB,GAAoBuB,GAAsBqF,GACjD;AACU,UAAA,EAAE,IAAAC,EAAO,IAAA7G,GACT,EAAE,OAAA8G,GAAO,QAAAC,EAAW,IAAA;AAEvB,IAAAF,EAAA;AAAA,MACCA,EAAG;AAAA,MACHtF,EAAQ,cAAc,UAAaA,EAAQ,cAAcyF,GAAY;AAAA,IAAA,GAGrEJ,EAAU,UAAU,MAEnBA,EAAkB,QAAQE,GAC1BF,EAAkB,SAASG,GAEzBF,EAAA;AAAA,MAAWtF,EAAQ;AAAA,MAAQ;AAAA,MAC1BA,EAAQ;AAAA,MACRuF;AAAA,MACAC;AAAA,MACA;AAAA,MACAxF,EAAQ;AAAA,MACRA,EAAQ;AAAA,MACR;AAAA,IAAA;AAGR,UAAM0F,IAAU,KAAK,SACfR,IAAQ,KAAK;AAEf,IAAAQ,KAAW,CAAC,KAAK,iBAEjB,KAAK,eAAe,IAAI,WAAW9G,EAAS,gBAAgBA,EAAS,gBAAgB,CAAC;AAG1F,aAASa,IAAI,GAAGA,IAAIyF,EAAM,QAAQzF,KAClC;AACU,YAAAkG,IAAMT,EAAMzF,CAAC,GACbkF,IAAMgB,EAAI;AAEhB,UAAIN,EAAU,WAAW,KAAK,MAAM5F,CAAC,EAAE;AAEnC;AAGJ,YAAMmG,IAAMjB,EAAI;AAEhB,MAAI,CAACA,EAAI,SAAS,CAACiB,KAAO,CAACA,EAAI,WAI3BF,MAAYf,EAAI,QAAQ,KAAK,aAAaA,EAAI,SAAS,KAAK,cAEzDW,EAAA;AAAA,QAActF,EAAQ;AAAA,QAAQ;AAAA,QAC7B2F,EAAI;AAAA,QACJA,EAAI;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL3F,EAAQ;AAAA,QACRA,EAAQ;AAAA,QACR,KAAK;AAAA,MAAA,GAGVsF,EAAA;AAAA,QAActF,EAAQ;AAAA,QAAQ;AAAA,QAC7B2F,EAAI;AAAA,QACJA,EAAI;AAAA,QACJ3F,EAAQ;AAAA,QACRA,EAAQ;AAAA,QACR4F,EAAI;AAAA,MAAA;AAAA,IACZ;AAEO,WAAA;AAAA,EACX;AACJ;ACrKA,SAASC,GAAkBC,GAC3B;AACI,MAAIC,IAAM;AAEH,EAAAA,KAAA;AAAA,GACAA,KAAA;AAAA,GAEAA,KAAA,4BACAA,KAAA;AAAA,wBACAA,KAAA;AAAA;AAEP,WAAStG,IAAI,GAAGA,IAAIqG,GAAarG;AAEtB,IAAAsG,KAAA;AAAA,QAEHtG,IAAIqG,IAAc,MAElBC,KAAO,mBAAmBtG,CAAC,QAGxBsG,KAAA;AAAA,IACAA,KAAA;AAAA,+BAAmCtG,CAAC,kCAAkCA,CAAC,OACvEsG,KAAA;AAAA;AAGJ,SAAAA,KAAA;AAAA,GACAA,KAAA;AAAA,GAEAA;AACX;AAQgB,SAAAC,GAAarE,GAAuBmE,GACpD;AACI,QAAMG,IAA8B,CAAA;AAEpC,WAASxG,IAAI,GAAGA,IAAIqG,GAAarG;AAE7B,IAAAwG,EAAaxG,CAAC,IAAIA;AAGtB,EAAAkC,EAAO,SAAS,YAAYsE;AAE5B,QAAMC,IAA6B,CAAA;AAEnC,WAASzG,IAAI,GAAGA,IAAIqG,GAAarG;AAGjB,IAAAyG,EAAA,KAAK,IAAM,IAAI,GACfA,EAAA,KAAK,IAAM,IAAI;AAG/B,EAAAvE,EAAO,SAAS,eAAeuE;AACnC;AASgB,SAAAC,GAAoBL,GAAqBM,GACzD;AACW,SAAAA,EAAY,QAAQ,aAAa,GAAGN,CAAW,EAAE,EACnD,QAAQ,eAAeD,GAAkBC,CAAW,CAAC;AAC9D;AC3EA,MAAMO,KAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAiC3BC,KAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8B5B,MAAMC,UAAsBC,GACnC;AAAA,EAGI,YAAYV,GACZ;AACC;AAAA,MACI,IAAIW;AAAA,QACGJ;AAAA,QACAK,GAAoCZ,GAAaQ,EAA0B;AAAA,MAC/E;AAAA,MACH;AAAA,QACI,gBAAgB,IAAI,aAAa,CAAC;AAAA,QAClC,WAAW,CAAC;AAAA,QACZ,cAAc,CAAC;AAAA,QACf,iBAAiB,IAAIK,GAAO;AAAA,MAChC;AAAA,IAAA,GAdS,KAAA,cAAA,GAiBb,KAAK,cAAcb,GACHc,GAAa,MAAM,KAAK,WAAW;AAAA,EACpD;AACJ;AAEO,MAAMC,UAAwBC,GACrC;AAAA,EAMI,cACA;AACO,aAPI,KAAA,WAAA,IACG,KAAA,cAAA,GACd,KAAA,SAAS,KAAK,WAAW,GACR,KAAA,iBAAA;AAMV,UAAAC,IAAM,KAAK,MAAM,IAAIC,GAAO,IAAI,aAAa,CAAC,GAAG,IAAM,EAAK;AAElE,SAAK,aAAa,mBAAmBD,GAAK,GAAG,IAAO,GAAG,KAAK,QAAQ,CAAC,EAChE,aAAa,iBAAiBA,GAAK,GAAG,IAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,EAClE,aAAa,UAAUA,GAAK,GAAG,IAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,EAC3D,aAAa,SAASA,GAAK,GAAG,IAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,EAC1D,aAAa,cAAcA,GAAK,GAAG,IAAO,GAAG,KAAK,QAAQ,KAAK,CAAC,EAC7D,aAAa,gBAAgBA,GAAK,GAAG,IAAO,GAAG,KAAK,QAAQ,KAAK,CAAC,EAClE,aAAa,UAAUA,GAAK,GAAG,IAAO,GAAG,KAAK,QAAQ,KAAK,CAAC;AAAA,EACrE;AAGJ;ACxGO,MAAME,WAAqBC,GAClC;AAAA;AAAA,EAsBI,YAAYzI,GACZ;AACC,UAAMA,CAAQ,GAnBR,KAAA,WAAW,CAAC,GAAG,CAAC,GAEvB,KAAQ,QAAQ,GAGhB,KAAQ,cAAsB,MAS9B,KAAQ,WAAmC,IAO1C,KAAK,SAAS,IAAI8H,EAAc3H,EAAS,oBAAoB,GAC7D,KAAK,cAAc,IAAIoI,GAAO,QAAW,IAAM,EAAI,GACnD,KAAK,iBAAiB,GAAI,GAC1B,KAAK,aAAa;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiBvI,GAAoBoD,GACrC;AACC,UAAMsF,IAAMtF,EAAS,QACZF,IAAS,KAAK,QACjBmE,IAAclH,EAAS,sBACpBsH,IAA6BvE,EAAO,SAAS;AAElD,QAAA,EAAAwF,IAAMvI,EAAS,gBAAgBkH,IAM5B;AAAA,UAAAlH,EAAS,iBAAiB;AAG1B,iBAASa,IAAI,GAAGA,IAAIoC,EAAS,QAAQpC,KACrC;AACU,gBAAAO,IAAU6B,EAASpC,CAAC;AAE1B,cAAI,CAACO,KAAW,CAACA,EAAQ;AAErB;AAGJ,UAAAvB,EAAS,QAAQ,KAAKoD,EAASpC,CAAC,GAAGA,CAAC,GAEpCyG,EAAYzG,IAAI,CAAC,IAAI,IAAMoC,EAASpC,CAAC,EAAE,WACvCyG,EAAazG,IAAI,IAAK,CAAC,IAAI,IAAMoC,EAASpC,CAAC,EAAE;AAAA,QACjD;AAAA,WAGJ;AAEI,aAAK,aAAa;AAElB,cAAM2H,IAAe,KAAK,KAAKD,IAAMvI,EAAS,aAAa;AAG3D,iBAASa,IAAI,GAAGA,IAAI0H,GAAK1H,KACzB;AACU,gBAAAO,IAAU6B,EAASpC,CAAC;AAEtB,cAAAO,KAAWA,EAAQ,OACvB;AACI,kBAAMqH,IAAgB,KAAK,MAAM5H,IAAIb,EAAS,aAAa,GACrD6F,IAAYhF,IAAIb,EAAS;AAE/B,iBAAK,SAASyI,CAAa,EAAE,KAAK5C,GAAWzE,CAAO;AAAA,UACxD;AAAA,QACJ;AAGA,iBAASP,IAAI,GAAGA,IAAI2H,GAAc3H;AAE9B,UAAAhB,EAAS,QAAQ,KAAK,KAAK,SAASgB,CAAC,EAAE,aAAaA,CAAC,GAErDyG,EAAYzG,IAAI,CAAC,IAAI,IAAM,KAAK,SAASA,CAAC,EAAE,OAC/ByG,EAAAzG,IAAI,IAAK,CAAC,IAAI,IAAM,KAAK,SAASA,CAAC,EAAE,YAAY;AAAA,MAEtE;AAEA,MAAAkC,EAAO,SAAS,eAAeuE;AAAA;AAAA,EACnC;AAAA,EAEA,QACA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WACA;AACO,UAAAoB,IAAO,IAAIT;AAEZ,WAAAS,EAAA,SAAS,KAAK,WAAW,GACzBA,EAAA,iBAAiB,KAAK,OAEpBA;AAAA,EACR;AAAA;AAAA,EAGA,YAA2B;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAEjD,UACA;AACC,UAAM,QAAQ,GAEd,KAAK,SAAS;AAAA,EACf;AAAA;AAAA,EAGO,iBAAiBC,GAAcC,IAAuB,MAC7D;AACC,UAAMC,IAAeF,IAAO;AAExB,IAAAE,KAAgB,KAAK,UAYzB,KAAK,QAAQA,GACR,KAAA,YAAY,OAAOC,GAAM;AAAA,MAAsBH;AAAA,MAChD3I,EAAS,gBAAgB,IAAI,YAAY2I,IAAO,CAAC,IAAI;AAAA,IAAA,CAAU;AAAA,EASpE;AAAA;AAAA,EAGQ,eACR;AACK,QAAA,EAAA3I,EAAS,iBAAiB;AAK9B,eAASa,IAAI,GAAGA,IAAIb,EAAS,eAAea,KAC5C;AACW,YAAA,KAAK,SAASA,CAAC;AAAG;AAEhB,cAAAkI,IAAW,IAAI3C,KAClB4C,IAAU,IAAIC,GAAYF,CAAQ;AAExC,QAAAC,EAAQ,YAAYhJ,EAAS,oBAC7BgJ,EAAQ,WAAWE,GAAW,OAEtB,KAAA,SAASrI,CAAC,IAAIkI;AAAA,MAC1B;AAAA,EACD;AACJ;ACvLO,MAAMI,KAAe;AAAA,EACxB,oBAAAvJ;AAAA,EACA,wBAAwByF;AAAA,EACxB,kBAAAA;AAAA,EACA,UAAAlF;AAAA,EACA,iBAAAiG;AAAA,EACA,sBAAsBA;AAAA,EACtB,eAAe7F;AAAA,EACf,SAAAA;AAAA,EACA,eAAAoH;AAAA,EACA,iBAAAM;AAAA,EACA,gBAAgBN;AAAA,EAChB,cAAcM;AAAA,EACd,cAAAI;AACJ;AAcAvI,EAAW,IAAI;AAAA,EACX,MAAM;AAAA,EACN,MAAMC,EAAc;AAAA,EACpB,KAAKsI;AACT,CAAC;"}